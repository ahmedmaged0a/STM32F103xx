
STM32F103xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ce0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e10  08000e10  000207d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e10  08000e10  000207d0  2**0
                  CONTENTS
  4 .ARM          00000000  08000e10  08000e10  000207d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e10  08000e10  000207d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e10  08000e10  00010e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e14  08000e14  00010e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007d0  20000000  08000e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  200007d0  080015e8  000207d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  080015e8  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004ea2  00000000  00000000  000207f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b9e  00000000  00000000  0002569b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000012ba  00000000  00000000  00026239  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000002a8  00000000  00000000  000274f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000240  00000000  00000000  000277a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000c91  00000000  00000000  000279e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002778  00000000  00000000  00028671  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008e61  00000000  00000000  0002ade9  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00033c4a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000978  00000000  00000000  00033cc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200007d0 	.word	0x200007d0
 800014c:	00000000 	.word	0x00000000
 8000150:	08000df8 	.word	0x08000df8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200007d4 	.word	0x200007d4
 800016c:	08000df8 	.word	0x08000df8

08000170 <DMA_enuConfigurationSetup>:
 * @brief 		- This Function used to make a configuration setup entered by user from application layer
 * @param [in] 	- PDMAHandle Which contain the configuration
 * @retval 		- ErrorState which indicates that function works without errors
 */
ES_t DMA_enuConfigurationSetup (DMA_Handle_t *PDMAHandle)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrorState = ES_NOK;
 8000178:	2300      	movs	r3, #0
 800017a:	73fb      	strb	r3, [r7, #15]
	if(PDMAHandle != NULL)
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2b00      	cmp	r3, #0
 8000180:	f000 831f 	beq.w	80007c2 <DMA_enuConfigurationSetup+0x652>
	{
		//Disable DMA Before Setup the Configuation
		//Address offset: 0x08 + 0d20 × (channel number – 1)
		CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,0);
 8000184:	49a3      	ldr	r1, [pc, #652]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	1e5a      	subs	r2, r3, #1
 800018c:	4613      	mov	r3, r2
 800018e:	009b      	lsls	r3, r3, #2
 8000190:	4413      	add	r3, r2
 8000192:	009b      	lsls	r3, r3, #2
 8000194:	440b      	add	r3, r1
 8000196:	3308      	adds	r3, #8
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	489e      	ldr	r0, [pc, #632]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 800019c:	687a      	ldr	r2, [r7, #4]
 800019e:	7812      	ldrb	r2, [r2, #0]
 80001a0:	3a01      	subs	r2, #1
 80001a2:	f023 0101 	bic.w	r1, r3, #1
 80001a6:	4613      	mov	r3, r2
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	4413      	add	r3, r2
 80001ac:	009b      	lsls	r3, r3, #2
 80001ae:	4403      	add	r3, r0
 80001b0:	3308      	adds	r3, #8
 80001b2:	6019      	str	r1, [r3, #0]
		* 							Start Configuration Setup
		* ==============================================================================================
		*/

		//1-Directions
		switch(PDMAHandle->DMA1_Direction)
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	785b      	ldrb	r3, [r3, #1]
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d01c      	beq.n	80001f6 <DMA_enuConfigurationSetup+0x86>
 80001bc:	2b02      	cmp	r3, #2
 80001be:	d033      	beq.n	8000228 <DMA_enuConfigurationSetup+0xb8>
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	d14a      	bne.n	800025a <DMA_enuConfigurationSetup+0xea>
		{
		case MEM_TO_MEM :
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,14);
 80001c4:	4993      	ldr	r1, [pc, #588]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	1e5a      	subs	r2, r3, #1
 80001cc:	4613      	mov	r3, r2
 80001ce:	009b      	lsls	r3, r3, #2
 80001d0:	4413      	add	r3, r2
 80001d2:	009b      	lsls	r3, r3, #2
 80001d4:	440b      	add	r3, r1
 80001d6:	3308      	adds	r3, #8
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	488e      	ldr	r0, [pc, #568]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	7812      	ldrb	r2, [r2, #0]
 80001e0:	3a01      	subs	r2, #1
 80001e2:	f443 4180 	orr.w	r1, r3, #16384	; 0x4000
 80001e6:	4613      	mov	r3, r2
 80001e8:	009b      	lsls	r3, r3, #2
 80001ea:	4413      	add	r3, r2
 80001ec:	009b      	lsls	r3, r3, #2
 80001ee:	4403      	add	r3, r0
 80001f0:	3308      	adds	r3, #8
 80001f2:	6019      	str	r1, [r3, #0]
			break;
 80001f4:	e031      	b.n	800025a <DMA_enuConfigurationSetup+0xea>
		case PREI_TO_MEM:
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,4);
 80001f6:	4987      	ldr	r1, [pc, #540]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	1e5a      	subs	r2, r3, #1
 80001fe:	4613      	mov	r3, r2
 8000200:	009b      	lsls	r3, r3, #2
 8000202:	4413      	add	r3, r2
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	440b      	add	r3, r1
 8000208:	3308      	adds	r3, #8
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4881      	ldr	r0, [pc, #516]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 800020e:	687a      	ldr	r2, [r7, #4]
 8000210:	7812      	ldrb	r2, [r2, #0]
 8000212:	3a01      	subs	r2, #1
 8000214:	f023 0110 	bic.w	r1, r3, #16
 8000218:	4613      	mov	r3, r2
 800021a:	009b      	lsls	r3, r3, #2
 800021c:	4413      	add	r3, r2
 800021e:	009b      	lsls	r3, r3, #2
 8000220:	4403      	add	r3, r0
 8000222:	3308      	adds	r3, #8
 8000224:	6019      	str	r1, [r3, #0]
			break;
 8000226:	e018      	b.n	800025a <DMA_enuConfigurationSetup+0xea>
		case MEM_TO_PREI:
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,4);
 8000228:	497a      	ldr	r1, [pc, #488]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	1e5a      	subs	r2, r3, #1
 8000230:	4613      	mov	r3, r2
 8000232:	009b      	lsls	r3, r3, #2
 8000234:	4413      	add	r3, r2
 8000236:	009b      	lsls	r3, r3, #2
 8000238:	440b      	add	r3, r1
 800023a:	3308      	adds	r3, #8
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4875      	ldr	r0, [pc, #468]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	7812      	ldrb	r2, [r2, #0]
 8000244:	3a01      	subs	r2, #1
 8000246:	f043 0110 	orr.w	r1, r3, #16
 800024a:	4613      	mov	r3, r2
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	4413      	add	r3, r2
 8000250:	009b      	lsls	r3, r3, #2
 8000252:	4403      	add	r3, r0
 8000254:	3308      	adds	r3, #8
 8000256:	6019      	str	r1, [r3, #0]
			break;
 8000258:	bf00      	nop
		}
		//Memory Increment or not
		if(PDMAHandle->DMA1_MEM_INC == ENABLE)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	795b      	ldrb	r3, [r3, #5]
 800025e:	2b01      	cmp	r3, #1
 8000260:	d118      	bne.n	8000294 <DMA_enuConfigurationSetup+0x124>
		{
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,7);
 8000262:	496c      	ldr	r1, [pc, #432]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	1e5a      	subs	r2, r3, #1
 800026a:	4613      	mov	r3, r2
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	4413      	add	r3, r2
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	440b      	add	r3, r1
 8000274:	3308      	adds	r3, #8
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4866      	ldr	r0, [pc, #408]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 800027a:	687a      	ldr	r2, [r7, #4]
 800027c:	7812      	ldrb	r2, [r2, #0]
 800027e:	3a01      	subs	r2, #1
 8000280:	f043 0180 	orr.w	r1, r3, #128	; 0x80
 8000284:	4613      	mov	r3, r2
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	4413      	add	r3, r2
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	4403      	add	r3, r0
 800028e:	3308      	adds	r3, #8
 8000290:	6019      	str	r1, [r3, #0]
 8000292:	e017      	b.n	80002c4 <DMA_enuConfigurationSetup+0x154>
		}
		else
		{
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,7);
 8000294:	495f      	ldr	r1, [pc, #380]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	1e5a      	subs	r2, r3, #1
 800029c:	4613      	mov	r3, r2
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	4413      	add	r3, r2
 80002a2:	009b      	lsls	r3, r3, #2
 80002a4:	440b      	add	r3, r1
 80002a6:	3308      	adds	r3, #8
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	485a      	ldr	r0, [pc, #360]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80002ac:	687a      	ldr	r2, [r7, #4]
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	3a01      	subs	r2, #1
 80002b2:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80002b6:	4613      	mov	r3, r2
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	4413      	add	r3, r2
 80002bc:	009b      	lsls	r3, r3, #2
 80002be:	4403      	add	r3, r0
 80002c0:	3308      	adds	r3, #8
 80002c2:	6019      	str	r1, [r3, #0]
		}
		//Peripheral Increment or not
		if(PDMAHandle->DMA1_PERI_INC == ENABLE)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	799b      	ldrb	r3, [r3, #6]
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d118      	bne.n	80002fe <DMA_enuConfigurationSetup+0x18e>
		{
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,6);
 80002cc:	4951      	ldr	r1, [pc, #324]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	1e5a      	subs	r2, r3, #1
 80002d4:	4613      	mov	r3, r2
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	4413      	add	r3, r2
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	440b      	add	r3, r1
 80002de:	3308      	adds	r3, #8
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	484c      	ldr	r0, [pc, #304]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	3a01      	subs	r2, #1
 80002ea:	f043 0140 	orr.w	r1, r3, #64	; 0x40
 80002ee:	4613      	mov	r3, r2
 80002f0:	009b      	lsls	r3, r3, #2
 80002f2:	4413      	add	r3, r2
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	4403      	add	r3, r0
 80002f8:	3308      	adds	r3, #8
 80002fa:	6019      	str	r1, [r3, #0]
 80002fc:	e017      	b.n	800032e <DMA_enuConfigurationSetup+0x1be>
		}
		else
		{
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,6);
 80002fe:	4945      	ldr	r1, [pc, #276]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	781b      	ldrb	r3, [r3, #0]
 8000304:	1e5a      	subs	r2, r3, #1
 8000306:	4613      	mov	r3, r2
 8000308:	009b      	lsls	r3, r3, #2
 800030a:	4413      	add	r3, r2
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	440b      	add	r3, r1
 8000310:	3308      	adds	r3, #8
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	483f      	ldr	r0, [pc, #252]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	7812      	ldrb	r2, [r2, #0]
 800031a:	3a01      	subs	r2, #1
 800031c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8000320:	4613      	mov	r3, r2
 8000322:	009b      	lsls	r3, r3, #2
 8000324:	4413      	add	r3, r2
 8000326:	009b      	lsls	r3, r3, #2
 8000328:	4403      	add	r3, r0
 800032a:	3308      	adds	r3, #8
 800032c:	6019      	str	r1, [r3, #0]
		}
		//2-Enable Circular DMA OR NOT
		switch(PDMAHandle->DMA1_CIRCULAR)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	79db      	ldrb	r3, [r3, #7]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d01a      	beq.n	800036c <DMA_enuConfigurationSetup+0x1fc>
 8000336:	2b01      	cmp	r3, #1
 8000338:	d131      	bne.n	800039e <DMA_enuConfigurationSetup+0x22e>
		{
		case ENABLE :
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,5);
 800033a:	4936      	ldr	r1, [pc, #216]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	1e5a      	subs	r2, r3, #1
 8000342:	4613      	mov	r3, r2
 8000344:	009b      	lsls	r3, r3, #2
 8000346:	4413      	add	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	440b      	add	r3, r1
 800034c:	3308      	adds	r3, #8
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4830      	ldr	r0, [pc, #192]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	7812      	ldrb	r2, [r2, #0]
 8000356:	3a01      	subs	r2, #1
 8000358:	f043 0120 	orr.w	r1, r3, #32
 800035c:	4613      	mov	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	4413      	add	r3, r2
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	4403      	add	r3, r0
 8000366:	3308      	adds	r3, #8
 8000368:	6019      	str	r1, [r3, #0]
			break;
 800036a:	e018      	b.n	800039e <DMA_enuConfigurationSetup+0x22e>
		case DISABLE:
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,5);
 800036c:	4929      	ldr	r1, [pc, #164]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	781b      	ldrb	r3, [r3, #0]
 8000372:	1e5a      	subs	r2, r3, #1
 8000374:	4613      	mov	r3, r2
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	4413      	add	r3, r2
 800037a:	009b      	lsls	r3, r3, #2
 800037c:	440b      	add	r3, r1
 800037e:	3308      	adds	r3, #8
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4824      	ldr	r0, [pc, #144]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 8000384:	687a      	ldr	r2, [r7, #4]
 8000386:	7812      	ldrb	r2, [r2, #0]
 8000388:	3a01      	subs	r2, #1
 800038a:	f023 0120 	bic.w	r1, r3, #32
 800038e:	4613      	mov	r3, r2
 8000390:	009b      	lsls	r3, r3, #2
 8000392:	4413      	add	r3, r2
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	4403      	add	r3, r0
 8000398:	3308      	adds	r3, #8
 800039a:	6019      	str	r1, [r3, #0]
			break;
 800039c:	bf00      	nop
		}
		//3-Memory Size Select
		switch(PDMAHandle->DMA1_MSIZE)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	78db      	ldrb	r3, [r3, #3]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d038      	beq.n	8000418 <DMA_enuConfigurationSetup+0x2a8>
 80003a6:	2b02      	cmp	r3, #2
 80003a8:	d067      	beq.n	800047a <DMA_enuConfigurationSetup+0x30a>
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8096 	bne.w	80004dc <DMA_enuConfigurationSetup+0x36c>
		{
		case BYTE :
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,10);
 80003b0:	4918      	ldr	r1, [pc, #96]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	1e5a      	subs	r2, r3, #1
 80003b8:	4613      	mov	r3, r2
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	4413      	add	r3, r2
 80003be:	009b      	lsls	r3, r3, #2
 80003c0:	440b      	add	r3, r1
 80003c2:	3308      	adds	r3, #8
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4813      	ldr	r0, [pc, #76]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80003c8:	687a      	ldr	r2, [r7, #4]
 80003ca:	7812      	ldrb	r2, [r2, #0]
 80003cc:	3a01      	subs	r2, #1
 80003ce:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 80003d2:	4613      	mov	r3, r2
 80003d4:	009b      	lsls	r3, r3, #2
 80003d6:	4413      	add	r3, r2
 80003d8:	009b      	lsls	r3, r3, #2
 80003da:	4403      	add	r3, r0
 80003dc:	3308      	adds	r3, #8
 80003de:	6019      	str	r1, [r3, #0]
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,11);
 80003e0:	490c      	ldr	r1, [pc, #48]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	1e5a      	subs	r2, r3, #1
 80003e8:	4613      	mov	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	440b      	add	r3, r1
 80003f2:	3308      	adds	r3, #8
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <DMA_enuConfigurationSetup+0x2a4>)
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	7812      	ldrb	r2, [r2, #0]
 80003fc:	3a01      	subs	r2, #1
 80003fe:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	4403      	add	r3, r0
 800040c:	3308      	adds	r3, #8
 800040e:	6019      	str	r1, [r3, #0]
			break;
 8000410:	e064      	b.n	80004dc <DMA_enuConfigurationSetup+0x36c>
 8000412:	bf00      	nop
 8000414:	40020000 	.word	0x40020000
		case HALF_WORD:
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,10);
 8000418:	49b7      	ldr	r1, [pc, #732]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	4613      	mov	r3, r2
 8000422:	009b      	lsls	r3, r3, #2
 8000424:	4413      	add	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	440b      	add	r3, r1
 800042a:	3308      	adds	r3, #8
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	48b2      	ldr	r0, [pc, #712]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	7812      	ldrb	r2, [r2, #0]
 8000434:	3a01      	subs	r2, #1
 8000436:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 800043a:	4613      	mov	r3, r2
 800043c:	009b      	lsls	r3, r3, #2
 800043e:	4413      	add	r3, r2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	4403      	add	r3, r0
 8000444:	3308      	adds	r3, #8
 8000446:	6019      	str	r1, [r3, #0]
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,11);
 8000448:	49ab      	ldr	r1, [pc, #684]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	4613      	mov	r3, r2
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	4413      	add	r3, r2
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	440b      	add	r3, r1
 800045a:	3308      	adds	r3, #8
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	48a6      	ldr	r0, [pc, #664]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000460:	687a      	ldr	r2, [r7, #4]
 8000462:	7812      	ldrb	r2, [r2, #0]
 8000464:	3a01      	subs	r2, #1
 8000466:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800046a:	4613      	mov	r3, r2
 800046c:	009b      	lsls	r3, r3, #2
 800046e:	4413      	add	r3, r2
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	4403      	add	r3, r0
 8000474:	3308      	adds	r3, #8
 8000476:	6019      	str	r1, [r3, #0]
			break;
 8000478:	e030      	b.n	80004dc <DMA_enuConfigurationSetup+0x36c>
		case WORD:
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,11);
 800047a:	499f      	ldr	r1, [pc, #636]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	1e5a      	subs	r2, r3, #1
 8000482:	4613      	mov	r3, r2
 8000484:	009b      	lsls	r3, r3, #2
 8000486:	4413      	add	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	440b      	add	r3, r1
 800048c:	3308      	adds	r3, #8
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4899      	ldr	r0, [pc, #612]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	7812      	ldrb	r2, [r2, #0]
 8000496:	3a01      	subs	r2, #1
 8000498:	f443 6100 	orr.w	r1, r3, #2048	; 0x800
 800049c:	4613      	mov	r3, r2
 800049e:	009b      	lsls	r3, r3, #2
 80004a0:	4413      	add	r3, r2
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	4403      	add	r3, r0
 80004a6:	3308      	adds	r3, #8
 80004a8:	6019      	str	r1, [r3, #0]
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,10);
 80004aa:	4993      	ldr	r1, [pc, #588]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	1e5a      	subs	r2, r3, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	4413      	add	r3, r2
 80004b8:	009b      	lsls	r3, r3, #2
 80004ba:	440b      	add	r3, r1
 80004bc:	3308      	adds	r3, #8
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	488d      	ldr	r0, [pc, #564]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7812      	ldrb	r2, [r2, #0]
 80004c6:	3a01      	subs	r2, #1
 80004c8:	f423 6180 	bic.w	r1, r3, #1024	; 0x400
 80004cc:	4613      	mov	r3, r2
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	4413      	add	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4403      	add	r3, r0
 80004d6:	3308      	adds	r3, #8
 80004d8:	6019      	str	r1, [r3, #0]
			break;
 80004da:	bf00      	nop
		}
		//3-Peripheral Size Select
		switch(PDMAHandle->DMA1_PSIZE)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	791b      	ldrb	r3, [r3, #4]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d035      	beq.n	8000550 <DMA_enuConfigurationSetup+0x3e0>
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d064      	beq.n	80005b2 <DMA_enuConfigurationSetup+0x442>
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	f040 8093 	bne.w	8000614 <DMA_enuConfigurationSetup+0x4a4>
		{
		case BYTE :
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,8);
 80004ee:	4982      	ldr	r1, [pc, #520]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	1e5a      	subs	r2, r3, #1
 80004f6:	4613      	mov	r3, r2
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	4413      	add	r3, r2
 80004fc:	009b      	lsls	r3, r3, #2
 80004fe:	440b      	add	r3, r1
 8000500:	3308      	adds	r3, #8
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	487c      	ldr	r0, [pc, #496]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	7812      	ldrb	r2, [r2, #0]
 800050a:	3a01      	subs	r2, #1
 800050c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8000510:	4613      	mov	r3, r2
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	4413      	add	r3, r2
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	4403      	add	r3, r0
 800051a:	3308      	adds	r3, #8
 800051c:	6019      	str	r1, [r3, #0]
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,9);
 800051e:	4976      	ldr	r1, [pc, #472]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	1e5a      	subs	r2, r3, #1
 8000526:	4613      	mov	r3, r2
 8000528:	009b      	lsls	r3, r3, #2
 800052a:	4413      	add	r3, r2
 800052c:	009b      	lsls	r3, r3, #2
 800052e:	440b      	add	r3, r1
 8000530:	3308      	adds	r3, #8
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4870      	ldr	r0, [pc, #448]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	3a01      	subs	r2, #1
 800053c:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 8000540:	4613      	mov	r3, r2
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	4413      	add	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4403      	add	r3, r0
 800054a:	3308      	adds	r3, #8
 800054c:	6019      	str	r1, [r3, #0]
			break;
 800054e:	e061      	b.n	8000614 <DMA_enuConfigurationSetup+0x4a4>
		case HALF_WORD:
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,8);
 8000550:	4969      	ldr	r1, [pc, #420]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	1e5a      	subs	r2, r3, #1
 8000558:	4613      	mov	r3, r2
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	4413      	add	r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	440b      	add	r3, r1
 8000562:	3308      	adds	r3, #8
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4864      	ldr	r0, [pc, #400]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7812      	ldrb	r2, [r2, #0]
 800056c:	3a01      	subs	r2, #1
 800056e:	f443 7180 	orr.w	r1, r3, #256	; 0x100
 8000572:	4613      	mov	r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4413      	add	r3, r2
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	4403      	add	r3, r0
 800057c:	3308      	adds	r3, #8
 800057e:	6019      	str	r1, [r3, #0]
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,9);
 8000580:	495d      	ldr	r1, [pc, #372]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	1e5a      	subs	r2, r3, #1
 8000588:	4613      	mov	r3, r2
 800058a:	009b      	lsls	r3, r3, #2
 800058c:	4413      	add	r3, r2
 800058e:	009b      	lsls	r3, r3, #2
 8000590:	440b      	add	r3, r1
 8000592:	3308      	adds	r3, #8
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4858      	ldr	r0, [pc, #352]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7812      	ldrb	r2, [r2, #0]
 800059c:	3a01      	subs	r2, #1
 800059e:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80005a2:	4613      	mov	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4403      	add	r3, r0
 80005ac:	3308      	adds	r3, #8
 80005ae:	6019      	str	r1, [r3, #0]
			break;
 80005b0:	e030      	b.n	8000614 <DMA_enuConfigurationSetup+0x4a4>
		case WORD:
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,9);
 80005b2:	4951      	ldr	r1, [pc, #324]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	1e5a      	subs	r2, r3, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	440b      	add	r3, r1
 80005c4:	3308      	adds	r3, #8
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	484b      	ldr	r0, [pc, #300]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	7812      	ldrb	r2, [r2, #0]
 80005ce:	3a01      	subs	r2, #1
 80005d0:	f443 7100 	orr.w	r1, r3, #512	; 0x200
 80005d4:	4613      	mov	r3, r2
 80005d6:	009b      	lsls	r3, r3, #2
 80005d8:	4413      	add	r3, r2
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	4403      	add	r3, r0
 80005de:	3308      	adds	r3, #8
 80005e0:	6019      	str	r1, [r3, #0]
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,8);
 80005e2:	4945      	ldr	r1, [pc, #276]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	1e5a      	subs	r2, r3, #1
 80005ea:	4613      	mov	r3, r2
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	4413      	add	r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	3308      	adds	r3, #8
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	483f      	ldr	r0, [pc, #252]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	7812      	ldrb	r2, [r2, #0]
 80005fe:	3a01      	subs	r2, #1
 8000600:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	4403      	add	r3, r0
 800060e:	3308      	adds	r3, #8
 8000610:	6019      	str	r1, [r3, #0]
			break;
 8000612:	bf00      	nop
		}
		//3-Channel Priority
		switch(PDMAHandle->DMA1_Priority)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	2b03      	cmp	r3, #3
 800061a:	f200 80d4 	bhi.w	80007c6 <DMA_enuConfigurationSetup+0x656>
 800061e:	a201      	add	r2, pc, #4	; (adr r2, 8000624 <DMA_enuConfigurationSetup+0x4b4>)
 8000620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000624:	08000635 	.word	0x08000635
 8000628:	08000697 	.word	0x08000697
 800062c:	080006fd 	.word	0x080006fd
 8000630:	0800075f 	.word	0x0800075f
		{
		case DMA_LOW :
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,12);
 8000634:	4930      	ldr	r1, [pc, #192]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	1e5a      	subs	r2, r3, #1
 800063c:	4613      	mov	r3, r2
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	4413      	add	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	3308      	adds	r3, #8
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	482b      	ldr	r0, [pc, #172]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	3a01      	subs	r2, #1
 8000652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8000656:	4613      	mov	r3, r2
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	4413      	add	r3, r2
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	4403      	add	r3, r0
 8000660:	3308      	adds	r3, #8
 8000662:	6019      	str	r1, [r3, #0]
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,13);
 8000664:	4924      	ldr	r1, [pc, #144]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	1e5a      	subs	r2, r3, #1
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	009b      	lsls	r3, r3, #2
 8000674:	440b      	add	r3, r1
 8000676:	3308      	adds	r3, #8
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	481f      	ldr	r0, [pc, #124]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	7812      	ldrb	r2, [r2, #0]
 8000680:	3a01      	subs	r2, #1
 8000682:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8000686:	4613      	mov	r3, r2
 8000688:	009b      	lsls	r3, r3, #2
 800068a:	4413      	add	r3, r2
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	4403      	add	r3, r0
 8000690:	3308      	adds	r3, #8
 8000692:	6019      	str	r1, [r3, #0]
			break;
 8000694:	e097      	b.n	80007c6 <DMA_enuConfigurationSetup+0x656>
		case DMA_MEDIUM:
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,12);
 8000696:	4918      	ldr	r1, [pc, #96]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	4613      	mov	r3, r2
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	4413      	add	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	3308      	adds	r3, #8
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4812      	ldr	r0, [pc, #72]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	3a01      	subs	r2, #1
 80006b4:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 80006b8:	4613      	mov	r3, r2
 80006ba:	009b      	lsls	r3, r3, #2
 80006bc:	4413      	add	r3, r2
 80006be:	009b      	lsls	r3, r3, #2
 80006c0:	4403      	add	r3, r0
 80006c2:	3308      	adds	r3, #8
 80006c4:	6019      	str	r1, [r3, #0]
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,13);
 80006c6:	490c      	ldr	r1, [pc, #48]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	1e5a      	subs	r2, r3, #1
 80006ce:	4613      	mov	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	4413      	add	r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	440b      	add	r3, r1
 80006d8:	3308      	adds	r3, #8
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <DMA_enuConfigurationSetup+0x588>)
 80006de:	687a      	ldr	r2, [r7, #4]
 80006e0:	7812      	ldrb	r2, [r2, #0]
 80006e2:	3a01      	subs	r2, #1
 80006e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80006e8:	4613      	mov	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4403      	add	r3, r0
 80006f2:	3308      	adds	r3, #8
 80006f4:	6019      	str	r1, [r3, #0]
			break;
 80006f6:	e066      	b.n	80007c6 <DMA_enuConfigurationSetup+0x656>
 80006f8:	40020000 	.word	0x40020000
		case DMA_HIGH:
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,13);
 80006fc:	4935      	ldr	r1, [pc, #212]	; (80007d4 <DMA_enuConfigurationSetup+0x664>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	1e5a      	subs	r2, r3, #1
 8000704:	4613      	mov	r3, r2
 8000706:	009b      	lsls	r3, r3, #2
 8000708:	4413      	add	r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	440b      	add	r3, r1
 800070e:	3308      	adds	r3, #8
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4830      	ldr	r0, [pc, #192]	; (80007d4 <DMA_enuConfigurationSetup+0x664>)
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	7812      	ldrb	r2, [r2, #0]
 8000718:	3a01      	subs	r2, #1
 800071a:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
 800071e:	4613      	mov	r3, r2
 8000720:	009b      	lsls	r3, r3, #2
 8000722:	4413      	add	r3, r2
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	4403      	add	r3, r0
 8000728:	3308      	adds	r3, #8
 800072a:	6019      	str	r1, [r3, #0]
			CLEAR_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,12);
 800072c:	4929      	ldr	r1, [pc, #164]	; (80007d4 <DMA_enuConfigurationSetup+0x664>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	1e5a      	subs	r2, r3, #1
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	440b      	add	r3, r1
 800073e:	3308      	adds	r3, #8
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4824      	ldr	r0, [pc, #144]	; (80007d4 <DMA_enuConfigurationSetup+0x664>)
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	7812      	ldrb	r2, [r2, #0]
 8000748:	3a01      	subs	r2, #1
 800074a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4403      	add	r3, r0
 8000758:	3308      	adds	r3, #8
 800075a:	6019      	str	r1, [r3, #0]
			break;
 800075c:	e033      	b.n	80007c6 <DMA_enuConfigurationSetup+0x656>
		case DMA_VERY_HIGH:
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,13);
 800075e:	491d      	ldr	r1, [pc, #116]	; (80007d4 <DMA_enuConfigurationSetup+0x664>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	1e5a      	subs	r2, r3, #1
 8000766:	4613      	mov	r3, r2
 8000768:	009b      	lsls	r3, r3, #2
 800076a:	4413      	add	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	440b      	add	r3, r1
 8000770:	3308      	adds	r3, #8
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4817      	ldr	r0, [pc, #92]	; (80007d4 <DMA_enuConfigurationSetup+0x664>)
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	7812      	ldrb	r2, [r2, #0]
 800077a:	3a01      	subs	r2, #1
 800077c:	f443 5100 	orr.w	r1, r3, #8192	; 0x2000
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4403      	add	r3, r0
 800078a:	3308      	adds	r3, #8
 800078c:	6019      	str	r1, [r3, #0]
			SET_BIT(DMA->CHANNEL[PDMAHandle->DMA1_ChannelNumber-1].CCRx,12);
 800078e:	4911      	ldr	r1, [pc, #68]	; (80007d4 <DMA_enuConfigurationSetup+0x664>)
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	1e5a      	subs	r2, r3, #1
 8000796:	4613      	mov	r3, r2
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	4413      	add	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	440b      	add	r3, r1
 80007a0:	3308      	adds	r3, #8
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	480b      	ldr	r0, [pc, #44]	; (80007d4 <DMA_enuConfigurationSetup+0x664>)
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	7812      	ldrb	r2, [r2, #0]
 80007aa:	3a01      	subs	r2, #1
 80007ac:	f443 5180 	orr.w	r1, r3, #4096	; 0x1000
 80007b0:	4613      	mov	r3, r2
 80007b2:	009b      	lsls	r3, r3, #2
 80007b4:	4413      	add	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4403      	add	r3, r0
 80007ba:	3308      	adds	r3, #8
 80007bc:	6019      	str	r1, [r3, #0]
			break;
 80007be:	bf00      	nop
 80007c0:	e001      	b.n	80007c6 <DMA_enuConfigurationSetup+0x656>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 80007c2:	2302      	movs	r3, #2
 80007c4:	73fb      	strb	r3, [r7, #15]
	}
	return Local_enuErrorState;
 80007c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bc80      	pop	{r7}
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	40020000 	.word	0x40020000

080007d8 <DMA_enuEnable>:
 * @brief 		- This Function Used to Enable DMA Channel
 * @param [in] 	- Copy_u8ChannelNumber Which is the Channel Number
 * @retval 		- ErrorState which indicates that function works without errors
 */
ES_t DMA_enuEnable  (uint8_t Copy_u8ChannelNumber)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
	ES_t Local_enuErrorState = ES_NOK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8ChannelNumber < 8)
 80007e6:	79fb      	ldrb	r3, [r7, #7]
 80007e8:	2b07      	cmp	r3, #7
 80007ea:	d82c      	bhi.n	8000846 <DMA_enuEnable+0x6e>
	{
		//Clear All Flags
		DMA_SvidClearFlag(Copy_u8ChannelNumber, DMA_GIF);
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2100      	movs	r1, #0
 80007f0:	4618      	mov	r0, r3
 80007f2:	f000 f8bb 	bl	800096c <DMA_SvidClearFlag>
		DMA_SvidClearFlag(Copy_u8ChannelNumber, DMA_TCIF);
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	2101      	movs	r1, #1
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f8b6 	bl	800096c <DMA_SvidClearFlag>
		DMA_SvidClearFlag(Copy_u8ChannelNumber, DMA_HTIF);
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	2102      	movs	r1, #2
 8000804:	4618      	mov	r0, r3
 8000806:	f000 f8b1 	bl	800096c <DMA_SvidClearFlag>
		DMA_SvidClearFlag(Copy_u8ChannelNumber, DMA_TEIF);
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2103      	movs	r1, #3
 800080e:	4618      	mov	r0, r3
 8000810:	f000 f8ac 	bl	800096c <DMA_SvidClearFlag>
		//Enable Channel
		SET_BIT(DMA->CHANNEL[Copy_u8ChannelNumber-1].CCRx,0);
 8000814:	490f      	ldr	r1, [pc, #60]	; (8000854 <DMA_enuEnable+0x7c>)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	4613      	mov	r3, r2
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4413      	add	r3, r2
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	440b      	add	r3, r1
 8000824:	3308      	adds	r3, #8
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	480a      	ldr	r0, [pc, #40]	; (8000854 <DMA_enuEnable+0x7c>)
 800082a:	79fa      	ldrb	r2, [r7, #7]
 800082c:	3a01      	subs	r2, #1
 800082e:	f043 0101 	orr.w	r1, r3, #1
 8000832:	4613      	mov	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	4413      	add	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4403      	add	r3, r0
 800083c:	3308      	adds	r3, #8
 800083e:	6019      	str	r1, [r3, #0]
		Local_enuErrorState = ES_OK;
 8000840:	2301      	movs	r3, #1
 8000842:	73fb      	strb	r3, [r7, #15]
 8000844:	e001      	b.n	800084a <DMA_enuEnable+0x72>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
 8000846:	2303      	movs	r3, #3
 8000848:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enuErrorState;
 800084a:	7bfb      	ldrb	r3, [r7, #15]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020000 	.word	0x40020000

08000858 <DMA_enuInterruptEnable>:
 * @param [in] 	- Copy_u8ChannelNumber Which is the Channel Number
 * @param [in] 	- Copy_u8InterruptSource Which is Interrupt Source
 * @retval 		- ErrorState which indicates that function works without errors
 */
ES_t DMA_enuInterruptEnable  (uint8_t Copy_u8ChannelNumber , uint8_t Copy_u8InterruptSource)
{
 8000858:	b480      	push	{r7}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	4603      	mov	r3, r0
 8000860:	460a      	mov	r2, r1
 8000862:	71fb      	strb	r3, [r7, #7]
 8000864:	4613      	mov	r3, r2
 8000866:	71bb      	strb	r3, [r7, #6]
	ES_t Local_enuErrorState = ES_NOK;
 8000868:	2300      	movs	r3, #0
 800086a:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8ChannelNumber < 8)
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d81c      	bhi.n	80008ac <DMA_enuInterruptEnable+0x54>
	{
		//Enable Interrupt on @Copy_u8InterruptSource
		SET_BIT(DMA->CHANNEL[Copy_u8ChannelNumber-1].CCRx,Copy_u8InterruptSource);
 8000872:	4912      	ldr	r1, [pc, #72]	; (80008bc <DMA_enuInterruptEnable+0x64>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	1e5a      	subs	r2, r3, #1
 8000878:	4613      	mov	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4413      	add	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	440b      	add	r3, r1
 8000882:	3308      	adds	r3, #8
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	79ba      	ldrb	r2, [r7, #6]
 8000888:	2101      	movs	r1, #1
 800088a:	fa01 f202 	lsl.w	r2, r1, r2
 800088e:	4611      	mov	r1, r2
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <DMA_enuInterruptEnable+0x64>)
 8000892:	79fa      	ldrb	r2, [r7, #7]
 8000894:	3a01      	subs	r2, #1
 8000896:	4319      	orrs	r1, r3
 8000898:	4613      	mov	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4403      	add	r3, r0
 80008a2:	3308      	adds	r3, #8
 80008a4:	6019      	str	r1, [r3, #0]
		Local_enuErrorState = ES_OK;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
 80008aa:	e001      	b.n	80008b0 <DMA_enuInterruptEnable+0x58>
	}
	else
	{
		Local_enuErrorState = ES_OUTOFRANGE;
 80008ac:	2303      	movs	r3, #3
 80008ae:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enuErrorState;
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b2:	4618      	mov	r0, r3
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	40020000 	.word	0x40020000

080008c0 <DMA_enuSetAddress>:
 * @param [in] 	- Copy_Pu32MemoryAddress Which is The Memory Address (Destination)
 * @param [in] 	- Copy_u16NDT Which is Block Length
 * @retval 		- ErrorState which indicates that function works without errors
 */
ES_t DMA_enuSetAddress (uint8_t Copy_u8ChannelNumber , uint32_t *Copy_Pu32PeriphralAddress , uint32_t *Copy_Pu32MemoryAddress,uint16_t Copy_u16NDT)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b087      	sub	sp, #28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	60b9      	str	r1, [r7, #8]
 80008c8:	607a      	str	r2, [r7, #4]
 80008ca:	461a      	mov	r2, r3
 80008cc:	4603      	mov	r3, r0
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	4613      	mov	r3, r2
 80008d2:	81bb      	strh	r3, [r7, #12]
	ES_t Local_enuErrorState = ES_NOK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	75fb      	strb	r3, [r7, #23]
	if(Copy_Pu32MemoryAddress != NULL && Copy_Pu32PeriphralAddress != NULL)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d03c      	beq.n	8000958 <DMA_enuSetAddress+0x98>
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d039      	beq.n	8000958 <DMA_enuSetAddress+0x98>
	{
		CLEAR_BIT(DMA->CHANNEL[Copy_u8ChannelNumber-1].CCRx,0);
 80008e4:	4920      	ldr	r1, [pc, #128]	; (8000968 <DMA_enuSetAddress+0xa8>)
 80008e6:	7bfb      	ldrb	r3, [r7, #15]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	440b      	add	r3, r1
 80008f4:	3308      	adds	r3, #8
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	481b      	ldr	r0, [pc, #108]	; (8000968 <DMA_enuSetAddress+0xa8>)
 80008fa:	7bfa      	ldrb	r2, [r7, #15]
 80008fc:	3a01      	subs	r2, #1
 80008fe:	f023 0101 	bic.w	r1, r3, #1
 8000902:	4613      	mov	r3, r2
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	4413      	add	r3, r2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4403      	add	r3, r0
 800090c:	3308      	adds	r3, #8
 800090e:	6019      	str	r1, [r3, #0]
		DMA->CHANNEL[Copy_u8ChannelNumber-1].CPARx=(uint32_t)Copy_Pu32PeriphralAddress;
 8000910:	4815      	ldr	r0, [pc, #84]	; (8000968 <DMA_enuSetAddress+0xa8>)
 8000912:	7bfb      	ldrb	r3, [r7, #15]
 8000914:	1e5a      	subs	r2, r3, #1
 8000916:	68b9      	ldr	r1, [r7, #8]
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4403      	add	r3, r0
 8000922:	3310      	adds	r3, #16
 8000924:	6019      	str	r1, [r3, #0]
		DMA->CHANNEL[Copy_u8ChannelNumber-1].CMARx=(uint32_t)Copy_Pu32MemoryAddress;
 8000926:	4810      	ldr	r0, [pc, #64]	; (8000968 <DMA_enuSetAddress+0xa8>)
 8000928:	7bfb      	ldrb	r3, [r7, #15]
 800092a:	1e5a      	subs	r2, r3, #1
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	4613      	mov	r3, r2
 8000930:	009b      	lsls	r3, r3, #2
 8000932:	4413      	add	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4403      	add	r3, r0
 8000938:	3314      	adds	r3, #20
 800093a:	6019      	str	r1, [r3, #0]
		DMA->CHANNEL[Copy_u8ChannelNumber-1].CNDTRx=Copy_u16NDT;
 800093c:	480a      	ldr	r0, [pc, #40]	; (8000968 <DMA_enuSetAddress+0xa8>)
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	1e5a      	subs	r2, r3, #1
 8000942:	89b9      	ldrh	r1, [r7, #12]
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4403      	add	r3, r0
 800094e:	330c      	adds	r3, #12
 8000950:	6019      	str	r1, [r3, #0]
	    Local_enuErrorState = ES_OK;
 8000952:	2301      	movs	r3, #1
 8000954:	75fb      	strb	r3, [r7, #23]
 8000956:	e001      	b.n	800095c <DMA_enuSetAddress+0x9c>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 8000958:	2302      	movs	r3, #2
 800095a:	75fb      	strb	r3, [r7, #23]
	}

	return Local_enuErrorState;
 800095c:	7dfb      	ldrb	r3, [r7, #23]
}
 800095e:	4618      	mov	r0, r3
 8000960:	371c      	adds	r7, #28
 8000962:	46bd      	mov	sp, r7
 8000964:	bc80      	pop	{r7}
 8000966:	4770      	bx	lr
 8000968:	40020000 	.word	0x40020000

0800096c <DMA_SvidClearFlag>:
 * ==============================================================================================
 * 								Helper Functions {Private}
 * ==============================================================================================
 */
static void DMA_SvidClearFlag (uint8_t Copy_u8ChannelNumber,uint8_t Copy_u8Flag)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	71fb      	strb	r3, [r7, #7]
 8000978:	4613      	mov	r3, r2
 800097a:	71bb      	strb	r3, [r7, #6]
	Copy_u8ChannelNumber = (Copy_u8ChannelNumber-1)*4;
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	333f      	adds	r3, #63	; 0x3f
 8000980:	b2db      	uxtb	r3, r3
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	71fb      	strb	r3, [r7, #7]
	SET_BIT(DMA->IFCR,(Copy_u8ChannelNumber+Copy_u8Flag));
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <DMA_SvidClearFlag+0x3c>)
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	79f9      	ldrb	r1, [r7, #7]
 800098c:	79ba      	ldrb	r2, [r7, #6]
 800098e:	440a      	add	r2, r1
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	4611      	mov	r1, r2
 8000998:	4a03      	ldr	r2, [pc, #12]	; (80009a8 <DMA_SvidClearFlag+0x3c>)
 800099a:	430b      	orrs	r3, r1
 800099c:	6053      	str	r3, [r2, #4]
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40020000 	.word	0x40020000

080009ac <DMA1_Channel1_IRQHandler>:
/*
 * ==============================================================================================
 * 								IRQHandler For DMA_Channel1
 * ==============================================================================================
 */
void DMA1_Channel1_IRQHandler(void){
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	DMA_SvidClearFlag(1, DMA_GIF);
 80009b0:	2100      	movs	r1, #0
 80009b2:	2001      	movs	r0, #1
 80009b4:	f7ff ffda 	bl	800096c <DMA_SvidClearFlag>
	DMA_SvidClearFlag(1, DMA_TCIF);
 80009b8:	2101      	movs	r1, #1
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff ffd6 	bl	800096c <DMA_SvidClearFlag>
	DMA_CallBackChannel1();
 80009c0:	4b02      	ldr	r3, [pc, #8]	; (80009cc <DMA1_Channel1_IRQHandler+0x20>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4798      	blx	r3
}
 80009c6:	bf00      	nop
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000804 	.word	0x20000804

080009d0 <EXTI0_IRQHandler>:
		EXTI0_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI0_IRQHandler(void){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

	EXTI0_pCallBack();
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <EXTI0_IRQHandler+0x1c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4798      	blx	r3
	EXTI->PR |= (1<<0);
 80009da:	4b05      	ldr	r3, [pc, #20]	; (80009f0 <EXTI0_IRQHandler+0x20>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <EXTI0_IRQHandler+0x20>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6153      	str	r3, [r2, #20]

}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200007ec 	.word	0x200007ec
 80009f0:	40010400 	.word	0x40010400

080009f4 <EXTI1_IRQHandler>:
		EXTI1_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI1_IRQHandler(void){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0

	EXTI1_pCallBack();
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <EXTI1_IRQHandler+0x1c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4798      	blx	r3
	EXTI->PR |= (1<<1);
 80009fe:	4b05      	ldr	r3, [pc, #20]	; (8000a14 <EXTI1_IRQHandler+0x20>)
 8000a00:	695b      	ldr	r3, [r3, #20]
 8000a02:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <EXTI1_IRQHandler+0x20>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	6153      	str	r3, [r2, #20]

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200007f0 	.word	0x200007f0
 8000a14:	40010400 	.word	0x40010400

08000a18 <EXTI2_IRQHandler>:
		EXTI2_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI2_IRQHandler(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

	EXTI2_pCallBack();
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <EXTI2_IRQHandler+0x1c>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4798      	blx	r3
	EXTI->PR |= (1<<2);
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <EXTI2_IRQHandler+0x20>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <EXTI2_IRQHandler+0x20>)
 8000a28:	f043 0304 	orr.w	r3, r3, #4
 8000a2c:	6153      	str	r3, [r2, #20]

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200007f4 	.word	0x200007f4
 8000a38:	40010400 	.word	0x40010400

08000a3c <EXTI3_IRQHandler>:
		EXTI3_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI3_IRQHandler(void){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0

	EXTI3_pCallBack();
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <EXTI3_IRQHandler+0x1c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4798      	blx	r3
	EXTI->PR |= (1<<3);
 8000a46:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <EXTI3_IRQHandler+0x20>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <EXTI3_IRQHandler+0x20>)
 8000a4c:	f043 0308 	orr.w	r3, r3, #8
 8000a50:	6153      	str	r3, [r2, #20]

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200007f8 	.word	0x200007f8
 8000a5c:	40010400 	.word	0x40010400

08000a60 <EXTI4_IRQHandler>:
		EXTI4_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI4_IRQHandler(void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

	EXTI4_pCallBack();
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <EXTI4_IRQHandler+0x1c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4798      	blx	r3
	EXTI->PR |= (1<<4);
 8000a6a:	4b05      	ldr	r3, [pc, #20]	; (8000a80 <EXTI4_IRQHandler+0x20>)
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	4a04      	ldr	r2, [pc, #16]	; (8000a80 <EXTI4_IRQHandler+0x20>)
 8000a70:	f043 0310 	orr.w	r3, r3, #16
 8000a74:	6153      	str	r3, [r2, #20]

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	200007fc 	.word	0x200007fc
 8000a80:	40010400 	.word	0x40010400

08000a84 <MNVIC_enuEnableInterrupt>:
 * @param [in] 	- Copy_u8InterruptID Which can be any Interrupt Position Based on Vector Table
 * @param [out] - none
 * @retval 		- Error State to Check That Function Works Without Error
 */
ES_t MNVIC_enuEnableInterrupt  	( uint8_t Copy_u8InterruptID )
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	ES_t Local_enuErrorState = ES_NOK;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
	if(Copy_u8InterruptID <= Interrupt_DMA2_Channel4_5)
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	2b3b      	cmp	r3, #59	; 0x3b
 8000a96:	d810      	bhi.n	8000aba <MNVIC_enuEnableInterrupt+0x36>
	{
		NVIC_ISER[Copy_u8InterruptID/32] = 1<<(Copy_u8InterruptID%32);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	f003 031f 	and.w	r3, r3, #31
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	095b      	lsrs	r3, r3, #5
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000aae:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 8000ab2:	601a      	str	r2, [r3, #0]
		Local_enuErrorState = ES_OK;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	73fb      	strb	r3, [r7, #15]
 8000ab8:	e001      	b.n	8000abe <MNVIC_enuEnableInterrupt+0x3a>
	}
	else
	{
		Local_enuErrorState = ES_NOK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enuErrorState;
 8000abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
	...

08000acc <RCC_enuInitConfig>:
 * @param [in] 	- none
 * @param [out] - none
 * @retval 		- ErrorState Which indicate that function works well or not
 */
ES_t RCC_enuInitConfig(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
	ES_t Local_enuErrorState = ES_NOK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	//Bit 17 HSERDY: External high-speed clock ready flag
	//Check HSE IS READY (Stable)
	while((1&(RCC->CR>>17))==0);
#elif RCC_CLOCK_TYPE == RCC_HSE
	//Bits 1:0 SW[1:0] @reg CFGR: HSE selected as system clock
	RCC->CFGR |=  (1<<0);
 8000ad6:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <RCC_enuInitConfig+0x50>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	4a10      	ldr	r2, [pc, #64]	; (8000b1c <RCC_enuInitConfig+0x50>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6053      	str	r3, [r2, #4]
	RCC->CFGR &=~ (1<<0);
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	; (8000b1c <RCC_enuInitConfig+0x50>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	4a0d      	ldr	r2, [pc, #52]	; (8000b1c <RCC_enuInitConfig+0x50>)
 8000ae8:	f023 0301 	bic.w	r3, r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
	//enable clock on HSE by write one @Bit 16
	RCC->CR |=(1<<16);
 8000aee:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <RCC_enuInitConfig+0x50>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <RCC_enuInitConfig+0x50>)
 8000af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af8:	6013      	str	r3, [r2, #0]
	//Bit 17 HSERDY: External high-speed clock ready flag
	//Check HSE IS READY (Stable)
	while((1&(RCC->CR>>17))==0);
 8000afa:	bf00      	nop
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <RCC_enuInitConfig+0x50>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	0c5b      	lsrs	r3, r3, #17
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d0f8      	beq.n	8000afc <RCC_enuInitConfig+0x30>
	Local_enuErrorState = ES_OK;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	71fb      	strb	r3, [r7, #7]
	#endif
		//PLL Enable
		RCC->CR |= (1<<24);
		Local_enuErrorState = ES_OK;
#endif
return Local_enuErrorState;
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40021000 	.word	0x40021000

08000b20 <SysTick_Handler>:
	//Busy until Count Done
	while((1 & (SYSTICK->CTRL >> 16)) == 0);
}
//======================================Interrupt Handler========================
void SysTick_Handler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
	STK_VPtrFun();
 8000b24:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <SysTick_Handler+0x38>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4798      	blx	r3
	if(STK_u8CheckStatus == STK_SINGLE)
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <SysTick_Handler+0x3c>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10e      	bne.n	8000b52 <SysTick_Handler+0x32>
	{
		SYSTICK->LOAD = 0;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <SysTick_Handler+0x40>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	605a      	str	r2, [r3, #4]
		//Disable Interrupt
		SYSTICK->CTRL &=~	 (1<<1);
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <SysTick_Handler+0x40>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <SysTick_Handler+0x40>)
 8000b40:	f023 0302 	bic.w	r3, r3, #2
 8000b44:	6013      	str	r3, [r2, #0]
		//Disable SYSTICK
		SYSTICK->CTRL &=~    (1<<0);
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <SysTick_Handler+0x40>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <SysTick_Handler+0x40>)
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	6013      	str	r3, [r2, #0]
	}
}
 8000b52:	bf00      	nop
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000808 	.word	0x20000808
 8000b5c:	20000800 	.word	0x20000800
 8000b60:	e000e010 	.word	0xe000e010

08000b64 <main>:
#include <STM32f103xx_RCC_driver.h>
#include <STM32f103xx_NVIC_driver.h>
#include <STM32F103xx_DMA_driver.h>
uint32_t arr4[500]={1,2,5,4,8,9,5,7};
int main(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	f5ad 5dbc 	sub.w	sp, sp, #6016	; 0x1780
 8000b6a:	af00      	add	r7, sp, #0
	DMA_Handle_t DMA_Config_t;
	DMA_Config_t.DMA1_CIRCULAR=DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000b72:	f102 021b 	add.w	r2, r2, #27
 8000b76:	7013      	strb	r3, [r2, #0]
	DMA_Config_t.DMA1_ChannelNumber=1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000b7e:	f102 0214 	add.w	r2, r2, #20
 8000b82:	7013      	strb	r3, [r2, #0]
	DMA_Config_t.DMA1_Direction = MEM_TO_MEM;
 8000b84:	2300      	movs	r3, #0
 8000b86:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000b8a:	f102 0215 	add.w	r2, r2, #21
 8000b8e:	7013      	strb	r3, [r2, #0]
	DMA_Config_t.DMA1_MEM_INC=ENABLE;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000b96:	f102 0219 	add.w	r2, r2, #25
 8000b9a:	7013      	strb	r3, [r2, #0]
	DMA_Config_t.DMA1_PERI_INC=ENABLE;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000ba2:	f102 021a 	add.w	r2, r2, #26
 8000ba6:	7013      	strb	r3, [r2, #0]
	DMA_Config_t.DMA1_MSIZE=WORD;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000bae:	f102 0217 	add.w	r2, r2, #23
 8000bb2:	7013      	strb	r3, [r2, #0]
	DMA_Config_t.DMA1_PSIZE=WORD;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000bba:	f102 0218 	add.w	r2, r2, #24
 8000bbe:	7013      	strb	r3, [r2, #0]
	DMA_Config_t.DMA1_Priority=DMA_VERY_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000bc6:	f102 0216 	add.w	r2, r2, #22
 8000bca:	7013      	strb	r3, [r2, #0]
	uint32_t arr1[500] = {5,1,4,5,3,5,1,4,5,3,5,1,4,5,3,1,1,1,5,8};
 8000bcc:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f000 f905 	bl	8000de8 <memset>
 8000bde:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000be2:	2205      	movs	r2, #5
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000bea:	2201      	movs	r2, #1
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000bf2:	2204      	movs	r2, #4
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000bfa:	2205      	movs	r2, #5
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c02:	2203      	movs	r2, #3
 8000c04:	611a      	str	r2, [r3, #16]
 8000c06:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c0a:	2205      	movs	r2, #5
 8000c0c:	615a      	str	r2, [r3, #20]
 8000c0e:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c12:	2201      	movs	r2, #1
 8000c14:	619a      	str	r2, [r3, #24]
 8000c16:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	61da      	str	r2, [r3, #28]
 8000c1e:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c22:	2205      	movs	r2, #5
 8000c24:	621a      	str	r2, [r3, #32]
 8000c26:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8000c2e:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c32:	2205      	movs	r2, #5
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
 8000c36:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c3e:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c42:	2204      	movs	r2, #4
 8000c44:	631a      	str	r2, [r3, #48]	; 0x30
 8000c46:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c4a:	2205      	movs	r2, #5
 8000c4c:	635a      	str	r2, [r3, #52]	; 0x34
 8000c4e:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c52:	2203      	movs	r2, #3
 8000c54:	639a      	str	r2, [r3, #56]	; 0x38
 8000c56:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c5e:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c62:	2201      	movs	r2, #1
 8000c64:	641a      	str	r2, [r3, #64]	; 0x40
 8000c66:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	645a      	str	r2, [r3, #68]	; 0x44
 8000c6e:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c72:	2205      	movs	r2, #5
 8000c74:	649a      	str	r2, [r3, #72]	; 0x48
 8000c76:	f607 73a4 	addw	r3, r7, #4004	; 0xfa4
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	64da      	str	r2, [r3, #76]	; 0x4c
	uint32_t arr2[500]=  {0};
 8000c7e:	f207 73d4 	addw	r3, r7, #2004	; 0x7d4
 8000c82:	4618      	mov	r0, r3
 8000c84:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c88:	461a      	mov	r2, r3
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	f000 f8ac 	bl	8000de8 <memset>

	uint32_t arr3[500] = {0};
 8000c90:	f107 0320 	add.w	r3, r7, #32
 8000c94:	3b1c      	subs	r3, #28
 8000c96:	4618      	mov	r0, r3
 8000c98:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f000 f8a2 	bl	8000de8 <memset>

	RCC_enuInitConfig();
 8000ca4:	f7ff ff12 	bl	8000acc <RCC_enuInitConfig>
	//Enable DMA Clock
	DMA_PERI_CLOCK_ENABLE();
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <main+0x1e0>)
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	4a25      	ldr	r2, [pc, #148]	; (8000d44 <main+0x1e0>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6153      	str	r3, [r2, #20]
	//Setup Configuration
	DMA_enuConfigurationSetup(&DMA_Config_t);
 8000cb4:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000cb8:	f103 0314 	add.w	r3, r3, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fa57 	bl	8000170 <DMA_enuConfigurationSetup>
	//Enable DMA Interrupt
	MNVIC_enuEnableInterrupt(Interrupt_DMA1_Channel1);
 8000cc2:	200b      	movs	r0, #11
 8000cc4:	f7ff fede 	bl	8000a84 <MNVIC_enuEnableInterrupt>
	//Setup Data
	DMA_enuSetAddress(CHANNEL1, arr1, arr2, 500);
 8000cc8:	f207 72d4 	addw	r2, r7, #2004	; 0x7d4
 8000ccc:	f607 71a4 	addw	r1, r7, #4004	; 0xfa4
 8000cd0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f7ff fdf3 	bl	80008c0 <DMA_enuSetAddress>
	//Enable Interrupt
	DMA_enuInterruptEnable(CHANNEL1, DMA_TCIE);
 8000cda:	2101      	movs	r1, #1
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fdbb 	bl	8000858 <DMA_enuInterruptEnable>
	//Start
	DMA_enuEnable(CHANNEL1);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fd78 	bl	80007d8 <DMA_enuEnable>

	//Processor Work
	for(uint16_t i = 0 ; i<500;i++)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000cee:	f102 021e 	add.w	r2, r2, #30
 8000cf2:	8013      	strh	r3, [r2, #0]
 8000cf4:	e01c      	b.n	8000d30 <main+0x1cc>
	{
		arr4[i] = arr3[i];
 8000cf6:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000cfa:	f103 031e 	add.w	r3, r3, #30
 8000cfe:	8819      	ldrh	r1, [r3, #0]
 8000d00:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d04:	f103 031e 	add.w	r3, r3, #30
 8000d08:	881a      	ldrh	r2, [r3, #0]
 8000d0a:	f107 0320 	add.w	r3, r7, #32
 8000d0e:	3b1c      	subs	r3, #28
 8000d10:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <main+0x1e4>)
 8000d16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	for(uint16_t i = 0 ; i<500;i++)
 8000d1a:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d1e:	f103 031e 	add.w	r3, r3, #30
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	3301      	adds	r3, #1
 8000d26:	f507 52bb 	add.w	r2, r7, #5984	; 0x1760
 8000d2a:	f102 021e 	add.w	r2, r2, #30
 8000d2e:	8013      	strh	r3, [r2, #0]
 8000d30:	f507 53bb 	add.w	r3, r7, #5984	; 0x1760
 8000d34:	f103 031e 	add.w	r3, r3, #30
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000d3e:	d3da      	bcc.n	8000cf6 <main+0x192>
	}
	while(1)
 8000d40:	e7fe      	b.n	8000d40 <main+0x1dc>
 8000d42:	bf00      	nop
 8000d44:	40021000 	.word	0x40021000
 8000d48:	20000000 	.word	0x20000000

08000d4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d4c:	480d      	ldr	r0, [pc, #52]	; (8000d84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d4e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d50:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	; (8000d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	; (8000d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <LoopForever+0xe>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	; (8000d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <LoopForever+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d7a:	f000 f811 	bl	8000da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fef1 	bl	8000b64 <main>

08000d82 <LoopForever>:

LoopForever:
    b LoopForever
 8000d82:	e7fe      	b.n	8000d82 <LoopForever>
  ldr   r0, =_estack
 8000d84:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	200007d0 	.word	0x200007d0
  ldr r2, =_sidata
 8000d90:	08000e18 	.word	0x08000e18
  ldr r2, =_sbss
 8000d94:	200007d0 	.word	0x200007d0
  ldr r4, =_ebss
 8000d98:	2000080c 	.word	0x2000080c

08000d9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC1_2_IRQHandler>
	...

08000da0 <__libc_init_array>:
 8000da0:	b570      	push	{r4, r5, r6, lr}
 8000da2:	2500      	movs	r5, #0
 8000da4:	4e0c      	ldr	r6, [pc, #48]	; (8000dd8 <__libc_init_array+0x38>)
 8000da6:	4c0d      	ldr	r4, [pc, #52]	; (8000ddc <__libc_init_array+0x3c>)
 8000da8:	1ba4      	subs	r4, r4, r6
 8000daa:	10a4      	asrs	r4, r4, #2
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	d109      	bne.n	8000dc4 <__libc_init_array+0x24>
 8000db0:	f000 f822 	bl	8000df8 <_init>
 8000db4:	2500      	movs	r5, #0
 8000db6:	4e0a      	ldr	r6, [pc, #40]	; (8000de0 <__libc_init_array+0x40>)
 8000db8:	4c0a      	ldr	r4, [pc, #40]	; (8000de4 <__libc_init_array+0x44>)
 8000dba:	1ba4      	subs	r4, r4, r6
 8000dbc:	10a4      	asrs	r4, r4, #2
 8000dbe:	42a5      	cmp	r5, r4
 8000dc0:	d105      	bne.n	8000dce <__libc_init_array+0x2e>
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}
 8000dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dc8:	4798      	blx	r3
 8000dca:	3501      	adds	r5, #1
 8000dcc:	e7ee      	b.n	8000dac <__libc_init_array+0xc>
 8000dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000dd2:	4798      	blx	r3
 8000dd4:	3501      	adds	r5, #1
 8000dd6:	e7f2      	b.n	8000dbe <__libc_init_array+0x1e>
 8000dd8:	08000e10 	.word	0x08000e10
 8000ddc:	08000e10 	.word	0x08000e10
 8000de0:	08000e10 	.word	0x08000e10
 8000de4:	08000e14 	.word	0x08000e14

08000de8 <memset>:
 8000de8:	4603      	mov	r3, r0
 8000dea:	4402      	add	r2, r0
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d100      	bne.n	8000df2 <memset+0xa>
 8000df0:	4770      	bx	lr
 8000df2:	f803 1b01 	strb.w	r1, [r3], #1
 8000df6:	e7f9      	b.n	8000dec <memset+0x4>

08000df8 <_init>:
 8000df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dfa:	bf00      	nop
 8000dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dfe:	bc08      	pop	{r3}
 8000e00:	469e      	mov	lr, r3
 8000e02:	4770      	bx	lr

08000e04 <_fini>:
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	bf00      	nop
 8000e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e0a:	bc08      	pop	{r3}
 8000e0c:	469e      	mov	lr, r3
 8000e0e:	4770      	bx	lr
