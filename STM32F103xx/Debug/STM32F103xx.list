
STM32F103xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008d8  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a08  08000a08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a14  08000a14  00010a1c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a14  08000a14  00010a1c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a14  08000a1c  00010a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a14  08000a14  00010a14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a18  08000a18  00010a18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000000  08000a1c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000a1c  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010a1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005811  00000000  00000000  00010a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000cc6  00000000  00000000  00016256  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000018dc  00000000  00000000  00016f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000338  00000000  00000000  000187f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d0  00000000  00000000  00018b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000a6c  00000000  00000000  00018e00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00002a79  00000000  00000000  0001986c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000936d  00000000  00000000  0001c2e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025652  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c10  00000000  00000000  000256d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080009f0 	.word	0x080009f0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080009f0 	.word	0x080009f0

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <DMA_SvidClearFlag>:
 * ==============================================================================================
 * 								Helper Functions {Private}
 * ==============================================================================================
 */
static void DMA_SvidClearFlag (uint8_t Copy_u8ChannelNumber,uint8_t Copy_u8Flag)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	4603      	mov	r3, r0
 8000188:	460a      	mov	r2, r1
 800018a:	71fb      	strb	r3, [r7, #7]
 800018c:	4613      	mov	r3, r2
 800018e:	71bb      	strb	r3, [r7, #6]
	Copy_u8ChannelNumber = (Copy_u8ChannelNumber-1)*4;
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	333f      	adds	r3, #63	; 0x3f
 8000194:	b2db      	uxtb	r3, r3
 8000196:	009b      	lsls	r3, r3, #2
 8000198:	71fb      	strb	r3, [r7, #7]
	SET_BIT(DMA->IFCR,(Copy_u8ChannelNumber+Copy_u8Flag));
 800019a:	4b08      	ldr	r3, [pc, #32]	; (80001bc <DMA_SvidClearFlag+0x3c>)
 800019c:	685b      	ldr	r3, [r3, #4]
 800019e:	79f9      	ldrb	r1, [r7, #7]
 80001a0:	79ba      	ldrb	r2, [r7, #6]
 80001a2:	440a      	add	r2, r1
 80001a4:	2101      	movs	r1, #1
 80001a6:	fa01 f202 	lsl.w	r2, r1, r2
 80001aa:	4611      	mov	r1, r2
 80001ac:	4a03      	ldr	r2, [pc, #12]	; (80001bc <DMA_SvidClearFlag+0x3c>)
 80001ae:	430b      	orrs	r3, r1
 80001b0:	6053      	str	r3, [r2, #4]
}
 80001b2:	bf00      	nop
 80001b4:	370c      	adds	r7, #12
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bc80      	pop	{r7}
 80001ba:	4770      	bx	lr
 80001bc:	40020000 	.word	0x40020000

080001c0 <DMA1_Channel1_IRQHandler>:
/*
 * ==============================================================================================
 * 								IRQHandler For DMA_Channel1
 * ==============================================================================================
 */
void DMA1_Channel1_IRQHandler(void){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
	DMA_SvidClearFlag(1, DMA_GIF);
 80001c4:	2100      	movs	r1, #0
 80001c6:	2001      	movs	r0, #1
 80001c8:	f7ff ffda 	bl	8000180 <DMA_SvidClearFlag>
	DMA_SvidClearFlag(1, DMA_TCIF);
 80001cc:	2101      	movs	r1, #1
 80001ce:	2001      	movs	r0, #1
 80001d0:	f7ff ffd6 	bl	8000180 <DMA_SvidClearFlag>
	DMA_CallBackChannel1();
 80001d4:	4b02      	ldr	r3, [pc, #8]	; (80001e0 <DMA1_Channel1_IRQHandler+0x20>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4798      	blx	r3
}
 80001da:	bf00      	nop
 80001dc:	bd80      	pop	{r7, pc}
 80001de:	bf00      	nop
 80001e0:	20000034 	.word	0x20000034

080001e4 <SPI_Init>:
 * @return            -Local_enuErrorState
 *
 * @Note              -
 */
ES_t SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b085      	sub	sp, #20
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrorState = ES_NOK;
 80001ec:	2300      	movs	r3, #0
 80001ee:	73fb      	strb	r3, [r7, #15]
	SPI1_PERI_CLOCK_ENABLE();
 80001f0:	4b3f      	ldr	r3, [pc, #252]	; (80002f0 <SPI_Init+0x10c>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a3e      	ldr	r2, [pc, #248]	; (80002f0 <SPI_Init+0x10c>)
 80001f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80001fa:	6193      	str	r3, [r2, #24]
	//Configure SPI_CR1 REG
	if(pSPIHandle != NULL)
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d06e      	beq.n	80002e0 <SPI_Init+0xfc>
	{
		//1.Device Mode Configuration Setup
		pSPIHandle->pSPIx->SPI_CR1 |= (pSPIHandle->SPIConfig.SPI_DeviceMode<<SPI_CR1_MSTR);
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	681a      	ldr	r2, [r3, #0]
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	791b      	ldrb	r3, [r3, #4]
 800020c:	009b      	lsls	r3, r3, #2
 800020e:	4619      	mov	r1, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	430a      	orrs	r2, r1
 8000216:	601a      	str	r2, [r3, #0]
		//2.Bus_Config Configuration Setup
		switch(pSPIHandle->SPIConfig.SPI_BusConfig)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	799b      	ldrb	r3, [r3, #6]
 800021c:	2b02      	cmp	r3, #2
 800021e:	d00c      	beq.n	800023a <SPI_Init+0x56>
 8000220:	2b04      	cmp	r3, #4
 8000222:	d013      	beq.n	800024c <SPI_Init+0x68>
 8000224:	2b01      	cmp	r3, #1
 8000226:	d122      	bne.n	800026e <SPI_Init+0x8a>
		{
		case SPI_BUS_CONFIG_FD:
			CLEAR_BIT(pSPIHandle->pSPIx->SPI_CR1,SPI_CR1_BIDIMODE);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000236:	601a      	str	r2, [r3, #0]
			break;
 8000238:	e019      	b.n	800026e <SPI_Init+0x8a>
		case SPI_BUS_CONFIG_HD:
			SET_BIT(pSPIHandle->pSPIx->SPI_CR1,SPI_CR1_BIDIMODE);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000248:	601a      	str	r2, [r3, #0]
			break;
 800024a:	e010      	b.n	800026e <SPI_Init+0x8a>
		case SPI_BUS_CONFIG_SIMPLEX_RXONLY:
			CLEAR_BIT(pSPIHandle->pSPIx->SPI_CR1,SPI_CR1_BIDIMODE);
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	681a      	ldr	r2, [r3, #0]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800025a:	601a      	str	r2, [r3, #0]
			SET_BIT(pSPIHandle->pSPIx->SPI_CR1,SPI_CR1_RXONLY);
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800026a:	601a      	str	r2, [r3, #0]
			break;
 800026c:	bf00      	nop
		}
		//3.Clock Configuration Setup [Serial Clock Speed]
		pSPIHandle->pSPIx->SPI_CR1 |= (pSPIHandle->SPIConfig.SPI_SclkSpeed<<SPI_CR1_BR);
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	795b      	ldrb	r3, [r3, #5]
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	4619      	mov	r1, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	430a      	orrs	r2, r1
 8000282:	601a      	str	r2, [r3, #0]
		//4.DFF Configuration setup
		pSPIHandle->pSPIx->SPI_CR1 |= (pSPIHandle->SPIConfig.SPI_DFF<<SPI_CR1_DFF);
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	681a      	ldr	r2, [r3, #0]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	79db      	ldrb	r3, [r3, #7]
 800028e:	02db      	lsls	r3, r3, #11
 8000290:	4619      	mov	r1, r3
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	430a      	orrs	r2, r1
 8000298:	601a      	str	r2, [r3, #0]
		//5.CPHA Configuration setup
		pSPIHandle->pSPIx->SPI_CR1 |= (pSPIHandle->SPIConfig.SPI_CPHA<<SPI_CR1_CPHA);
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	7a5b      	ldrb	r3, [r3, #9]
 80002a4:	4619      	mov	r1, r3
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	430a      	orrs	r2, r1
 80002ac:	601a      	str	r2, [r3, #0]
		//4.CPOL Configuration setup
		pSPIHandle->pSPIx->SPI_CR1 |= (pSPIHandle->SPIConfig.SPI_CPOL<<SPI_CR1_CPOL);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	681a      	ldr	r2, [r3, #0]
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	7a1b      	ldrb	r3, [r3, #8]
 80002b8:	005b      	lsls	r3, r3, #1
 80002ba:	4619      	mov	r1, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	430a      	orrs	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
		//4.SSM Configuration setup
		pSPIHandle->pSPIx->SPI_CR1 |= (pSPIHandle->SPIConfig.SPI_SSM<<SPI_CR1_SSM);
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	7a9b      	ldrb	r3, [r3, #10]
 80002ce:	025b      	lsls	r3, r3, #9
 80002d0:	4619      	mov	r1, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	430a      	orrs	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]
		Local_enuErrorState=ES_OK;
 80002da:	2301      	movs	r3, #1
 80002dc:	73fb      	strb	r3, [r7, #15]
 80002de:	e001      	b.n	80002e4 <SPI_Init+0x100>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 80002e0:	2302      	movs	r3, #2
 80002e2:	73fb      	strb	r3, [r7, #15]
	}
	return Local_enuErrorState;
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000

080002f4 <SPI_SendData>:
 * @return            -Local_enuErrorState
 *
 * @Note              - This Fuction Done Using Polling
 */
ES_t SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer,uint32_t Lenght_Data)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b087      	sub	sp, #28
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
	ES_t Local_enuErrorState = ES_NOK;
 8000300:	2300      	movs	r3, #0
 8000302:	75fb      	strb	r3, [r7, #23]
	if(pSPIx != NULL  && pTxBuffer !=NULL)
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	2b00      	cmp	r3, #0
 8000308:	d032      	beq.n	8000370 <SPI_SendData+0x7c>
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	2b00      	cmp	r3, #0
 800030e:	d02f      	beq.n	8000370 <SPI_SendData+0x7c>
	{
		while(Lenght_Data)
 8000310:	e028      	b.n	8000364 <SPI_SendData+0x70>
		{
			//1. wait for TXE become 1 means that buffer is empty
			while(!GET_BIT(pSPIx->SPI_SR,SPI_SR_TXE));
 8000312:	bf00      	nop
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	085b      	lsrs	r3, r3, #1
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f8      	beq.n	8000314 <SPI_SendData+0x20>
			//2. Check if DFF is 1 means user want to send 8 bits or 16 bits in DR
			if(GET_BIT(pSPIx->SPI_CR1,SPI_CR1_DFF)==SET)//16-bits DR
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	0adb      	lsrs	r3, r3, #11
 8000328:	f003 0301 	and.w	r3, r3, #1
 800032c:	2b01      	cmp	r3, #1
 800032e:	d10e      	bne.n	800034e <SPI_SendData+0x5a>
			{
				//Load 2 Bytes[16-bits] into DR Register
				pSPIx->SPI_DR = *((uint16_t *)pTxBuffer); //type casting to send 16 bits
 8000330:	68bb      	ldr	r3, [r7, #8]
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	461a      	mov	r2, r3
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	60da      	str	r2, [r3, #12]
				Lenght_Data--;//Decrease the first byte sent
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	3b01      	subs	r3, #1
 800033e:	607b      	str	r3, [r7, #4]
				Lenght_Data--;//Decrease the second byte sent
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	3b01      	subs	r3, #1
 8000344:	607b      	str	r3, [r7, #4]
				(uint16_t*)pTxBuffer++;//increment buffer address by 2 bytes
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	3301      	adds	r3, #1
 800034a:	60bb      	str	r3, [r7, #8]
 800034c:	e00a      	b.n	8000364 <SPI_SendData+0x70>
			}
			else//8-bits DR
			{
				//Load 1 Byte[8-bits] into DR Register
				pSPIx->SPI_DR = *(pTxBuffer);
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	461a      	mov	r2, r3
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	60da      	str	r2, [r3, #12]
				Lenght_Data--;//Decrease 1 byte
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3b01      	subs	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
				pTxBuffer++;//increment buffer address by 1 bytes
 800035e:	68bb      	ldr	r3, [r7, #8]
 8000360:	3301      	adds	r3, #1
 8000362:	60bb      	str	r3, [r7, #8]
		while(Lenght_Data)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d1d3      	bne.n	8000312 <SPI_SendData+0x1e>
			}

		}
		Local_enuErrorState = ES_OK;
 800036a:	2301      	movs	r3, #1
 800036c:	75fb      	strb	r3, [r7, #23]
 800036e:	e001      	b.n	8000374 <SPI_SendData+0x80>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 8000370:	2302      	movs	r3, #2
 8000372:	75fb      	strb	r3, [r7, #23]
	}
	return Local_enuErrorState;
 8000374:	7dfb      	ldrb	r3, [r7, #23]
}
 8000376:	4618      	mov	r0, r3
 8000378:	371c      	adds	r7, #28
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <SPI_PeripheralControl>:
 * @return            -Local_enuErrorState
 *
 * @Note              -
 */
ES_t SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t SPI_ENorDI)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	460b      	mov	r3, r1
 800038a:	70fb      	strb	r3, [r7, #3]
	ES_t Local_enuErrorState = ES_NOK;
 800038c:	2300      	movs	r3, #0
 800038e:	73fb      	strb	r3, [r7, #15]

	if(pSPIx != NULL)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	2b00      	cmp	r3, #0
 8000394:	d012      	beq.n	80003bc <SPI_PeripheralControl+0x3c>
	{
		if(SPI_ENorDI == ENABLE)
 8000396:	78fb      	ldrb	r3, [r7, #3]
 8000398:	2b01      	cmp	r3, #1
 800039a:	d106      	bne.n	80003aa <SPI_PeripheralControl+0x2a>
		{
			SET_BIT(pSPIx->SPI_CR1,SPI_CR1_SPE);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	e005      	b.n	80003b6 <SPI_PeripheralControl+0x36>
		}
		else
		{
			CLEAR_BIT(pSPIx->SPI_CR1,SPI_CR1_SPE);
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	601a      	str	r2, [r3, #0]
		}
		Local_enuErrorState = ES_OK;
 80003b6:	2301      	movs	r3, #1
 80003b8:	73fb      	strb	r3, [r7, #15]
 80003ba:	e001      	b.n	80003c0 <SPI_PeripheralControl+0x40>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 80003bc:	2302      	movs	r3, #2
 80003be:	73fb      	strb	r3, [r7, #15]
	}
	return Local_enuErrorState;
 80003c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr

080003cc <SPI_SSIControl>:
 * @return            -Local_enuErrorState
 *
 * @Note              -
 */
ES_t SPI_SSIControl(SPI_RegDef_t *pSPIx,uint8_t SPI_ENorDI)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
	ES_t Local_enuErrorState = ES_NOK;
 80003d8:	2300      	movs	r3, #0
 80003da:	73fb      	strb	r3, [r7, #15]

	if(pSPIx != NULL)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d012      	beq.n	8000408 <SPI_SSIControl+0x3c>
	{
		if(SPI_ENorDI == ENABLE)
 80003e2:	78fb      	ldrb	r3, [r7, #3]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d106      	bne.n	80003f6 <SPI_SSIControl+0x2a>
		{
			SET_BIT(pSPIx->SPI_CR1,SPI_CR1_SSI);
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	e005      	b.n	8000402 <SPI_SSIControl+0x36>
		}
		else
		{
			CLEAR_BIT(pSPIx->SPI_CR1,SPI_CR1_SSI);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	601a      	str	r2, [r3, #0]
		}
		Local_enuErrorState = ES_OK;
 8000402:	2301      	movs	r3, #1
 8000404:	73fb      	strb	r3, [r7, #15]
 8000406:	e001      	b.n	800040c <SPI_SSIControl+0x40>
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 8000408:	2302      	movs	r3, #2
 800040a:	73fb      	strb	r3, [r7, #15]
	}
	return Local_enuErrorState;
 800040c:	7bfb      	ldrb	r3, [r7, #15]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3714      	adds	r7, #20
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <EXTI0_IRQHandler>:
		EXTI0_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI0_IRQHandler(void){
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

	EXTI0_pCallBack();
 800041c:	4b05      	ldr	r3, [pc, #20]	; (8000434 <EXTI0_IRQHandler+0x1c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4798      	blx	r3
	EXTI->PR |= (1<<0);
 8000422:	4b05      	ldr	r3, [pc, #20]	; (8000438 <EXTI0_IRQHandler+0x20>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a04      	ldr	r2, [pc, #16]	; (8000438 <EXTI0_IRQHandler+0x20>)
 8000428:	f043 0301 	orr.w	r3, r3, #1
 800042c:	6153      	str	r3, [r2, #20]

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	2000001c 	.word	0x2000001c
 8000438:	40010400 	.word	0x40010400

0800043c <EXTI1_IRQHandler>:
		EXTI1_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI1_IRQHandler(void){
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0

	EXTI1_pCallBack();
 8000440:	4b05      	ldr	r3, [pc, #20]	; (8000458 <EXTI1_IRQHandler+0x1c>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4798      	blx	r3
	EXTI->PR |= (1<<1);
 8000446:	4b05      	ldr	r3, [pc, #20]	; (800045c <EXTI1_IRQHandler+0x20>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a04      	ldr	r2, [pc, #16]	; (800045c <EXTI1_IRQHandler+0x20>)
 800044c:	f043 0302 	orr.w	r3, r3, #2
 8000450:	6153      	str	r3, [r2, #20]

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000020 	.word	0x20000020
 800045c:	40010400 	.word	0x40010400

08000460 <EXTI2_IRQHandler>:
		EXTI2_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI2_IRQHandler(void){
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0

	EXTI2_pCallBack();
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <EXTI2_IRQHandler+0x1c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4798      	blx	r3
	EXTI->PR |= (1<<2);
 800046a:	4b05      	ldr	r3, [pc, #20]	; (8000480 <EXTI2_IRQHandler+0x20>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	4a04      	ldr	r2, [pc, #16]	; (8000480 <EXTI2_IRQHandler+0x20>)
 8000470:	f043 0304 	orr.w	r3, r3, #4
 8000474:	6153      	str	r3, [r2, #20]

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000024 	.word	0x20000024
 8000480:	40010400 	.word	0x40010400

08000484 <EXTI3_IRQHandler>:
		EXTI3_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI3_IRQHandler(void){
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0

	EXTI3_pCallBack();
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <EXTI3_IRQHandler+0x1c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4798      	blx	r3
	EXTI->PR |= (1<<3);
 800048e:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <EXTI3_IRQHandler+0x20>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <EXTI3_IRQHandler+0x20>)
 8000494:	f043 0308 	orr.w	r3, r3, #8
 8000498:	6153      	str	r3, [r2, #20]

}
 800049a:	bf00      	nop
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	20000028 	.word	0x20000028
 80004a4:	40010400 	.word	0x40010400

080004a8 <EXTI4_IRQHandler>:
		EXTI4_pCallBack = Copy_Vptr;
		Local_enuErrorState = ES_OK;
	}
	return Local_enuErrorState;
}
void EXTI4_IRQHandler(void){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0

	EXTI4_pCallBack();
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <EXTI4_IRQHandler+0x1c>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4798      	blx	r3
	EXTI->PR |= (1<<4);
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <EXTI4_IRQHandler+0x20>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	4a04      	ldr	r2, [pc, #16]	; (80004c8 <EXTI4_IRQHandler+0x20>)
 80004b8:	f043 0310 	orr.w	r3, r3, #16
 80004bc:	6153      	str	r3, [r2, #20]

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	2000002c 	.word	0x2000002c
 80004c8:	40010400 	.word	0x40010400

080004cc <Get_CRLH_Position>:
 * @brief 		- Helper function used to get the position of start bit in register
 * @param [in] 	- Pin_Number [0 --> 16]
 * @retval 		- none
 */
static uint8_t Get_CRLH_Position(uint16_t Pin_Number)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	switch (Pin_Number)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b80      	cmp	r3, #128	; 0x80
 80004da:	d042      	beq.n	8000562 <Get_CRLH_Position+0x96>
 80004dc:	2b80      	cmp	r3, #128	; 0x80
 80004de:	dc11      	bgt.n	8000504 <Get_CRLH_Position+0x38>
 80004e0:	2b08      	cmp	r3, #8
 80004e2:	d036      	beq.n	8000552 <Get_CRLH_Position+0x86>
 80004e4:	2b08      	cmp	r3, #8
 80004e6:	dc06      	bgt.n	80004f6 <Get_CRLH_Position+0x2a>
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d02e      	beq.n	800054a <Get_CRLH_Position+0x7e>
 80004ec:	2b04      	cmp	r3, #4
 80004ee:	d02e      	beq.n	800054e <Get_CRLH_Position+0x82>
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d028      	beq.n	8000546 <Get_CRLH_Position+0x7a>
 80004f4:	e047      	b.n	8000586 <Get_CRLH_Position+0xba>
 80004f6:	2b20      	cmp	r3, #32
 80004f8:	d02f      	beq.n	800055a <Get_CRLH_Position+0x8e>
 80004fa:	2b40      	cmp	r3, #64	; 0x40
 80004fc:	d02f      	beq.n	800055e <Get_CRLH_Position+0x92>
 80004fe:	2b10      	cmp	r3, #16
 8000500:	d029      	beq.n	8000556 <Get_CRLH_Position+0x8a>
 8000502:	e040      	b.n	8000586 <Get_CRLH_Position+0xba>
 8000504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000508:	d033      	beq.n	8000572 <Get_CRLH_Position+0xa6>
 800050a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800050e:	dc09      	bgt.n	8000524 <Get_CRLH_Position+0x58>
 8000510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000514:	d029      	beq.n	800056a <Get_CRLH_Position+0x9e>
 8000516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800051a:	d028      	beq.n	800056e <Get_CRLH_Position+0xa2>
 800051c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000520:	d021      	beq.n	8000566 <Get_CRLH_Position+0x9a>
 8000522:	e030      	b.n	8000586 <Get_CRLH_Position+0xba>
 8000524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000528:	d027      	beq.n	800057a <Get_CRLH_Position+0xae>
 800052a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052e:	dc03      	bgt.n	8000538 <Get_CRLH_Position+0x6c>
 8000530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000534:	d01f      	beq.n	8000576 <Get_CRLH_Position+0xaa>
 8000536:	e026      	b.n	8000586 <Get_CRLH_Position+0xba>
 8000538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800053c:	d01f      	beq.n	800057e <Get_CRLH_Position+0xb2>
 800053e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000542:	d01e      	beq.n	8000582 <Get_CRLH_Position+0xb6>
 8000544:	e01f      	b.n	8000586 <Get_CRLH_Position+0xba>
	{
	//CRL
	case GPIO_PIN_0:
		return 0;
 8000546:	2300      	movs	r3, #0
 8000548:	e01e      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 800054a:	2304      	movs	r3, #4
 800054c:	e01c      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800054e:	2308      	movs	r3, #8
 8000550:	e01a      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 8000552:	230c      	movs	r3, #12
 8000554:	e018      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000556:	2310      	movs	r3, #16
 8000558:	e016      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 800055a:	2314      	movs	r3, #20
 800055c:	e014      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800055e:	2318      	movs	r3, #24
 8000560:	e012      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 8000562:	231c      	movs	r3, #28
 8000564:	e010      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
		//CRH
	case GPIO_PIN_8:
		return 0;
 8000566:	2300      	movs	r3, #0
 8000568:	e00e      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 800056a:	2304      	movs	r3, #4
 800056c:	e00c      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 800056e:	2308      	movs	r3, #8
 8000570:	e00a      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 8000572:	230c      	movs	r3, #12
 8000574:	e008      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000576:	2310      	movs	r3, #16
 8000578:	e006      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 800057a:	2314      	movs	r3, #20
 800057c:	e004      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 800057e:	2318      	movs	r3, #24
 8000580:	e002      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 8000582:	231c      	movs	r3, #28
 8000584:	e000      	b.n	8000588 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000586:	2300      	movs	r3, #0
};
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr
	...

08000594 <GPIO_enuPeriClockControl>:
 * Note			-Stm32f103C6 MCU has  GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external pins from MCU
 */

static ES_t GPIO_enuPeriClockControl(GPIO_RegDef_t *PGPIOx , uint8_t Copy_u8Clockstatus)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	460b      	mov	r3, r1
 800059e:	70fb      	strb	r3, [r7, #3]
	ES_t Local_enuErrorState = ES_NOK;
 80005a0:	2300      	movs	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
	if(PGPIOx != NULL)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d076      	beq.n	8000698 <GPIO_enuPeriClockControl+0x104>
	{
		if (Copy_u8Clockstatus == ENABLE)
 80005aa:	78fb      	ldrb	r3, [r7, #3]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d136      	bne.n	800061e <GPIO_enuPeriClockControl+0x8a>
		{
			if(PGPIOx == GPIOA)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	4a3d      	ldr	r2, [pc, #244]	; (80006a8 <GPIO_enuPeriClockControl+0x114>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d108      	bne.n	80005ca <GPIO_enuPeriClockControl+0x36>
			{
				GPIOA_PERI_CLOCK_ENABLE();
 80005b8:	4b3c      	ldr	r3, [pc, #240]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a3b      	ldr	r2, [pc, #236]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
				Local_enuErrorState = ES_OK;
 80005c4:	2301      	movs	r3, #1
 80005c6:	73fb      	strb	r3, [r7, #15]
 80005c8:	e068      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
			else if(PGPIOx == GPIOB)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4a38      	ldr	r2, [pc, #224]	; (80006b0 <GPIO_enuPeriClockControl+0x11c>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d108      	bne.n	80005e4 <GPIO_enuPeriClockControl+0x50>
			{
				GPIOB_PERI_CLOCK_ENABLE();
 80005d2:	4b36      	ldr	r3, [pc, #216]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	4a35      	ldr	r2, [pc, #212]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	6193      	str	r3, [r2, #24]
				Local_enuErrorState = ES_OK;
 80005de:	2301      	movs	r3, #1
 80005e0:	73fb      	strb	r3, [r7, #15]
 80005e2:	e05b      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
			else if(PGPIOx == GPIOC)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a33      	ldr	r2, [pc, #204]	; (80006b4 <GPIO_enuPeriClockControl+0x120>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d108      	bne.n	80005fe <GPIO_enuPeriClockControl+0x6a>
			{
				GPIOC_PERI_CLOCK_ENABLE();
 80005ec:	4b2f      	ldr	r3, [pc, #188]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	4a2e      	ldr	r2, [pc, #184]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 80005f2:	f043 0310 	orr.w	r3, r3, #16
 80005f6:	6193      	str	r3, [r2, #24]
				Local_enuErrorState = ES_OK;
 80005f8:	2301      	movs	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e04e      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
			else if(PGPIOx == GPIOD)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a2d      	ldr	r2, [pc, #180]	; (80006b8 <GPIO_enuPeriClockControl+0x124>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d108      	bne.n	8000618 <GPIO_enuPeriClockControl+0x84>
			{
				GPIOD_PERI_CLOCK_ENABLE();
 8000606:	4b29      	ldr	r3, [pc, #164]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a28      	ldr	r2, [pc, #160]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 800060c:	f043 0320 	orr.w	r3, r3, #32
 8000610:	6193      	str	r3, [r2, #24]
				Local_enuErrorState = ES_OK;
 8000612:	2301      	movs	r3, #1
 8000614:	73fb      	strb	r3, [r7, #15]
 8000616:	e041      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
			else
			{
				Local_enuErrorState = ES_NOK;
 8000618:	2300      	movs	r3, #0
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	e03e      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
		}
		else if (Copy_u8Clockstatus == DISABLE)
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d136      	bne.n	8000692 <GPIO_enuPeriClockControl+0xfe>
		{
			if(PGPIOx == GPIOA)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <GPIO_enuPeriClockControl+0x114>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d108      	bne.n	800063e <GPIO_enuPeriClockControl+0xaa>
			{
				GPIOA_PERI_CLOCK_DISABLE();
 800062c:	4b1f      	ldr	r3, [pc, #124]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a1e      	ldr	r2, [pc, #120]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 8000632:	f023 0304 	bic.w	r3, r3, #4
 8000636:	6193      	str	r3, [r2, #24]
				Local_enuErrorState = ES_OK;
 8000638:	2301      	movs	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
 800063c:	e02e      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
			else if(PGPIOx == GPIOB)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <GPIO_enuPeriClockControl+0x11c>)
 8000642:	4293      	cmp	r3, r2
 8000644:	d108      	bne.n	8000658 <GPIO_enuPeriClockControl+0xc4>
			{
				GPIOB_PERI_CLOCK_DISABLE();
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	4a18      	ldr	r2, [pc, #96]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 800064c:	f023 0308 	bic.w	r3, r3, #8
 8000650:	6193      	str	r3, [r2, #24]
				Local_enuErrorState = ES_OK;
 8000652:	2301      	movs	r3, #1
 8000654:	73fb      	strb	r3, [r7, #15]
 8000656:	e021      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
			else if(PGPIOx == GPIOC)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4a16      	ldr	r2, [pc, #88]	; (80006b4 <GPIO_enuPeriClockControl+0x120>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d108      	bne.n	8000672 <GPIO_enuPeriClockControl+0xde>
			{
				GPIOC_PERI_CLOCK_DISABLE();
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 8000662:	699b      	ldr	r3, [r3, #24]
 8000664:	4a11      	ldr	r2, [pc, #68]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 8000666:	f023 0310 	bic.w	r3, r3, #16
 800066a:	6193      	str	r3, [r2, #24]
				Local_enuErrorState = ES_OK;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e014      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
			else if(PGPIOx == GPIOD)
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a10      	ldr	r2, [pc, #64]	; (80006b8 <GPIO_enuPeriClockControl+0x124>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d108      	bne.n	800068c <GPIO_enuPeriClockControl+0xf8>
			{
				GPIOD_PERI_CLOCK_DISABLE();
 800067a:	4b0c      	ldr	r3, [pc, #48]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a0b      	ldr	r2, [pc, #44]	; (80006ac <GPIO_enuPeriClockControl+0x118>)
 8000680:	f023 0320 	bic.w	r3, r3, #32
 8000684:	6193      	str	r3, [r2, #24]
				Local_enuErrorState = ES_OK;
 8000686:	2301      	movs	r3, #1
 8000688:	73fb      	strb	r3, [r7, #15]
 800068a:	e007      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
			else
			{
				Local_enuErrorState = ES_NOK;
 800068c:	2300      	movs	r3, #0
 800068e:	73fb      	strb	r3, [r7, #15]
 8000690:	e004      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
			}
		}
		else
		{
			Local_enuErrorState = ES_NOK;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
 8000696:	e001      	b.n	800069c <GPIO_enuPeriClockControl+0x108>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 8000698:	2302      	movs	r3, #2
 800069a:	73fb      	strb	r3, [r7, #15]
	}

	return Local_enuErrorState;
 800069c:	7bfb      	ldrb	r3, [r7, #15]

}
 800069e:	4618      	mov	r0, r3
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	40010800 	.word	0x40010800
 80006ac:	40021000 	.word	0x40021000
 80006b0:	40010c00 	.word	0x40010c00
 80006b4:	40011000 	.word	0x40011000
 80006b8:	40011400 	.word	0x40011400

080006bc <GPIO_enuInit>:
 * @retval 		- ErrorState Value Which can be [OK...NOK]
 * Note			-Stm32f103C6 MCU has  GPIO A,B,C,D,E Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external pins from MCU
 */
ES_t GPIO_enuInit(GPIO_Handle_t *PGPIOHandle)
{
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b087      	sub	sp, #28
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	ES_t Local_enuErrorState = ES_NOK;
 80006c4:	2300      	movs	r3, #0
 80006c6:	75fb      	strb	r3, [r7, #23]
	uint16_t Local_u8PinNumber = PGPIOHandle->GPIO_PinConfig_t.GPIO_PinNumber;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	889b      	ldrh	r3, [r3, #4]
 80006cc:	82bb      	strh	r3, [r7, #20]
	uint8_t Local_u8PinMode = PGPIOHandle->GPIO_PinConfig_t.GPIO_PinMode;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	799b      	ldrb	r3, [r3, #6]
 80006d2:	74fb      	strb	r3, [r7, #19]
	__vo uint32_t *Local_Pu32ConfigReg = NULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
	//Enable Peripheral Clock
	GPIO_enuPeriClockControl(PGPIOHandle->PGPIOx, ENABLE);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2101      	movs	r1, #1
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff ff58 	bl	8000594 <GPIO_enuPeriClockControl>
	if(PGPIOHandle != NULL)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f000 8092 	beq.w	8000810 <GPIO_enuInit+0x154>
	{
		//port configuration register low (GPIOx_CRL)  0>>7
		//port configuration register high (GPIOx_CRH)  8>>15
		Local_Pu32ConfigReg = (Local_u8PinNumber < GPIO_PIN_8)? &PGPIOHandle->PGPIOx->CRL:&PGPIOHandle->PGPIOx->CRH;
 80006ec:	8abb      	ldrh	r3, [r7, #20]
 80006ee:	2bff      	cmp	r3, #255	; 0xff
 80006f0:	d802      	bhi.n	80006f8 <GPIO_enuInit+0x3c>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	e002      	b.n	80006fe <GPIO_enuInit+0x42>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	3304      	adds	r3, #4
 80006fe:	60fb      	str	r3, [r7, #12]
		//Clear CNF , MODE
		*Local_Pu32ConfigReg &= ~(0xF << Get_CRLH_Position(Local_u8PinNumber));
 8000700:	8abb      	ldrh	r3, [r7, #20]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff fee2 	bl	80004cc <Get_CRLH_Position>
 8000708:	4603      	mov	r3, r0
 800070a:	461a      	mov	r2, r3
 800070c:	230f      	movs	r3, #15
 800070e:	4093      	lsls	r3, r2
 8000710:	43da      	mvns	r2, r3
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	401a      	ands	r2, r3
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	601a      	str	r2, [r3, #0]
		//Check Pin is output or not
		if(Local_u8PinMode  == GPIO_MODE_OUTPUT_AF_OD || Local_u8PinMode == GPIO_MODE_OUTPUT_AF_PP || Local_u8PinMode == GPIO_MODE_OUTPUT_OD ||Local_u8PinMode == GPIO_MODE_OUTPUT_PP)
 800071c:	7cfb      	ldrb	r3, [r7, #19]
 800071e:	2b07      	cmp	r3, #7
 8000720:	d008      	beq.n	8000734 <GPIO_enuInit+0x78>
 8000722:	7cfb      	ldrb	r3, [r7, #19]
 8000724:	2b06      	cmp	r3, #6
 8000726:	d005      	beq.n	8000734 <GPIO_enuInit+0x78>
 8000728:	7cfb      	ldrb	r3, [r7, #19]
 800072a:	2b05      	cmp	r3, #5
 800072c:	d002      	beq.n	8000734 <GPIO_enuInit+0x78>
 800072e:	7cfb      	ldrb	r3, [r7, #19]
 8000730:	2b04      	cmp	r3, #4
 8000732:	d117      	bne.n	8000764 <GPIO_enuInit+0xa8>
		{
			//Set CNF8[1:0] MODE8[1:0]
			*Local_Pu32ConfigReg |= ((((Local_u8PinMode - 4)<<2) | ((PGPIOHandle->GPIO_PinConfig_t.GPIO_PinSpeed)&0x0f)))<<Get_CRLH_Position(Local_u8PinNumber);
 8000734:	7cfb      	ldrb	r3, [r7, #19]
 8000736:	3b04      	subs	r3, #4
 8000738:	009a      	lsls	r2, r3, #2
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	79db      	ldrb	r3, [r3, #7]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	ea42 0403 	orr.w	r4, r2, r3
 8000746:	8abb      	ldrh	r3, [r7, #20]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff febf 	bl	80004cc <Get_CRLH_Position>
 800074e:	4603      	mov	r3, r0
 8000750:	fa04 f203 	lsl.w	r2, r4, r3
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	431a      	orrs	r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	601a      	str	r2, [r3, #0]
			Local_enuErrorState = ES_OK;
 800075e:	2301      	movs	r3, #1
 8000760:	75fb      	strb	r3, [r7, #23]
 8000762:	e057      	b.n	8000814 <GPIO_enuInit+0x158>
		}
		//if input mode
		else //MODE = 00
		{
			if(Local_u8PinMode == GPIO_MODE_INPUT_FLO || Local_u8PinMode == GPIO_MODE_ANALOG)
 8000764:	7cfb      	ldrb	r3, [r7, #19]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d002      	beq.n	8000770 <GPIO_enuInit+0xb4>
 800076a:	7cfb      	ldrb	r3, [r7, #19]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d112      	bne.n	8000796 <GPIO_enuInit+0xda>
			{
				//Set CNF8[1:0] MODE8[1:0]
				(*Local_Pu32ConfigReg) |= ((((Local_u8PinMode)<<2) | 0x0) &0x0f)<<Get_CRLH_Position(Local_u8PinNumber);
 8000770:	7cfb      	ldrb	r3, [r7, #19]
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	f003 040f 	and.w	r4, r3, #15
 8000778:	8abb      	ldrh	r3, [r7, #20]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fea6 	bl	80004cc <Get_CRLH_Position>
 8000780:	4603      	mov	r3, r0
 8000782:	fa04 f203 	lsl.w	r2, r4, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	431a      	orrs	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	601a      	str	r2, [r3, #0]
				Local_enuErrorState = ES_OK;
 8000790:	2301      	movs	r3, #1
 8000792:	75fb      	strb	r3, [r7, #23]
 8000794:	e039      	b.n	800080a <GPIO_enuInit+0x14e>
			}
			else if (Local_u8PinMode == GPIO_MODE_INPUT_AF)
 8000796:	7cfb      	ldrb	r3, [r7, #19]
 8000798:	2b08      	cmp	r3, #8
 800079a:	d110      	bne.n	80007be <GPIO_enuInit+0x102>
			{
				//Set CNF8[1:0] MODE8[1:0] acts as input floating
				(*Local_Pu32ConfigReg) |= ((((GPIO_MODE_INPUT_FLO)<<2) | 0x0) &0x0f)<<Get_CRLH_Position(Local_u8PinNumber);
 800079c:	8abb      	ldrh	r3, [r7, #20]
 800079e:	4618      	mov	r0, r3
 80007a0:	f7ff fe94 	bl	80004cc <Get_CRLH_Position>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	2304      	movs	r3, #4
 80007aa:	fa03 f202 	lsl.w	r2, r3, r2
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	431a      	orrs	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	601a      	str	r2, [r3, #0]
				Local_enuErrorState = ES_OK;
 80007b8:	2301      	movs	r3, #1
 80007ba:	75fb      	strb	r3, [r7, #23]
 80007bc:	e025      	b.n	800080a <GPIO_enuInit+0x14e>
			}
			else // PULL-UP or PULL-DOWN input
			{
				//Set CNF8[1:0] MODE8[1:0] acts as input floating
				(*Local_Pu32ConfigReg) |= ((((GPIO_MODE_INPUT_PU)<<2) | 0x0) &0x0f)<<Get_CRLH_Position(Local_u8PinNumber);
 80007be:	8abb      	ldrh	r3, [r7, #20]
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fe83 	bl	80004cc <Get_CRLH_Position>
 80007c6:	4603      	mov	r3, r0
 80007c8:	461a      	mov	r2, r3
 80007ca:	2308      	movs	r3, #8
 80007cc:	fa03 f202 	lsl.w	r2, r3, r2
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	431a      	orrs	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	601a      	str	r2, [r3, #0]

				if(Local_u8PinMode == GPIO_MODE_INPUT_PU ) // PUT 1 in ODR Register
 80007da:	7cfb      	ldrb	r3, [r7, #19]
 80007dc:	2b02      	cmp	r3, #2
 80007de:	d108      	bne.n	80007f2 <GPIO_enuInit+0x136>
				{
					PGPIOHandle->PGPIOx->ODR |= Local_u8PinNumber;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	68d9      	ldr	r1, [r3, #12]
 80007e6:	8aba      	ldrh	r2, [r7, #20]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	430a      	orrs	r2, r1
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	e009      	b.n	8000806 <GPIO_enuInit+0x14a>
				}
				else// PUT 0 in ODR Register
				{
					PGPIOHandle->PGPIOx->ODR &=~ Local_u8PinNumber;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	68da      	ldr	r2, [r3, #12]
 80007f8:	8abb      	ldrh	r3, [r7, #20]
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	400a      	ands	r2, r1
 8000804:	60da      	str	r2, [r3, #12]
				}

				Local_enuErrorState = ES_OK;
 8000806:	2301      	movs	r3, #1
 8000808:	75fb      	strb	r3, [r7, #23]
			}
			Local_enuErrorState = ES_OK;
 800080a:	2301      	movs	r3, #1
 800080c:	75fb      	strb	r3, [r7, #23]
 800080e:	e001      	b.n	8000814 <GPIO_enuInit+0x158>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
 8000810:	2302      	movs	r3, #2
 8000812:	75fb      	strb	r3, [r7, #23]
	}

	return Local_enuErrorState;
 8000814:	7dfb      	ldrb	r3, [r7, #23]
};
 8000816:	4618      	mov	r0, r3
 8000818:	371c      	adds	r7, #28
 800081a:	46bd      	mov	sp, r7
 800081c:	bd90      	pop	{r4, r7, pc}
	...

08000820 <SysTick_Handler>:
	//Busy until Count Done
	while((1 & (SYSTICK->CTRL >> 16)) == 0);
}
//======================================Interrupt Handler========================
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
	STK_VPtrFun();
 8000824:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <SysTick_Handler+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4798      	blx	r3
	if(STK_u8CheckStatus == STK_SINGLE)
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <SysTick_Handler+0x3c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	b2db      	uxtb	r3, r3
 8000830:	2b00      	cmp	r3, #0
 8000832:	d10e      	bne.n	8000852 <SysTick_Handler+0x32>
	{
		SYSTICK->LOAD = 0;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <SysTick_Handler+0x40>)
 8000836:	2200      	movs	r2, #0
 8000838:	605a      	str	r2, [r3, #4]
		//Disable Interrupt
		SYSTICK->CTRL &=~	 (1<<1);
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <SysTick_Handler+0x40>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <SysTick_Handler+0x40>)
 8000840:	f023 0302 	bic.w	r3, r3, #2
 8000844:	6013      	str	r3, [r2, #0]
		//Disable SYSTICK
		SYSTICK->CTRL &=~    (1<<0);
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <SysTick_Handler+0x40>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a05      	ldr	r2, [pc, #20]	; (8000860 <SysTick_Handler+0x40>)
 800084c:	f023 0301 	bic.w	r3, r3, #1
 8000850:	6013      	str	r3, [r2, #0]
	}
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000038 	.word	0x20000038
 800085c:	20000030 	.word	0x20000030
 8000860:	e000e010 	.word	0xe000e010

08000864 <SPI_GPIOInit>:
#include "STM32f103xx_GPIO_driver.h"
#include "STM32F103xx_SPI_driver.h"
#include <string.h>

void SPI_GPIOInit(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
	This bit is set and cleared by software. It controls the mapping of SPI1 NSS, SCK, MISO,
	MOSI alternate functions on the GPIO ports.
	0: No remap (NSS/PA4, SCK/PA5, MISO/PA6, MOSI/PA7)
	1: Remap (NSS/PA15, SCK/PB3, MISO/PB4, MOSI/PB5)*/
	GPIO_Handle_t SPIPins;
	SPIPins.PGPIOx = GPIOB;
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <SPI_GPIOInit+0x64>)
 800086c:	603b      	str	r3, [r7, #0]
	SPIPins.GPIO_PinConfig_t.GPIO_PinNumber = GPIO_PIN_1;
 800086e:	2302      	movs	r3, #2
 8000870:	80bb      	strh	r3, [r7, #4]
	SPIPins.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000872:	2304      	movs	r3, #4
 8000874:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig_t.GPIO_PinSpeed = GPIO_SPEED_10M;
 8000876:	2301      	movs	r3, #1
 8000878:	71fb      	strb	r3, [r7, #7]
	GPIO_enuInit(&SPIPins);
 800087a:	463b      	mov	r3, r7
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff ff1d 	bl	80006bc <GPIO_enuInit>
	//SCK
	SPIPins.PGPIOx = GPIOA;
 8000882:	4b12      	ldr	r3, [pc, #72]	; (80008cc <SPI_GPIOInit+0x68>)
 8000884:	603b      	str	r3, [r7, #0]
	SPIPins.GPIO_PinConfig_t.GPIO_PinMode = GPIO_MODE_OUTPUT_PP;
 8000886:	2304      	movs	r3, #4
 8000888:	71bb      	strb	r3, [r7, #6]
	SPIPins.GPIO_PinConfig_t.GPIO_PinNumber =GPIO_SPEED_10M;
 800088a:	2301      	movs	r3, #1
 800088c:	80bb      	strh	r3, [r7, #4]
	SPIPins.GPIO_PinConfig_t.GPIO_PinNumber = GPIO_PIN_5;
 800088e:	2320      	movs	r3, #32
 8000890:	80bb      	strh	r3, [r7, #4]
	GPIO_enuInit(&SPIPins);
 8000892:	463b      	mov	r3, r7
 8000894:	4618      	mov	r0, r3
 8000896:	f7ff ff11 	bl	80006bc <GPIO_enuInit>
	//MOSI
	SPIPins.GPIO_PinConfig_t.GPIO_PinNumber = GPIO_PIN_7;
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	80bb      	strh	r3, [r7, #4]
	GPIO_enuInit(&SPIPins);
 800089e:	463b      	mov	r3, r7
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff0b 	bl	80006bc <GPIO_enuInit>
	//MISO
	SPIPins.GPIO_PinConfig_t.GPIO_PinNumber = GPIO_PIN_6;
 80008a6:	2340      	movs	r3, #64	; 0x40
 80008a8:	80bb      	strh	r3, [r7, #4]
	GPIO_enuInit(&SPIPins);
 80008aa:	463b      	mov	r3, r7
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff ff05 	bl	80006bc <GPIO_enuInit>
	//NSS
	SPIPins.GPIO_PinConfig_t.GPIO_PinNumber = GPIO_PIN_4;
 80008b2:	2310      	movs	r3, #16
 80008b4:	80bb      	strh	r3, [r7, #4]
	GPIO_enuInit(&SPIPins);
 80008b6:	463b      	mov	r3, r7
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff feff 	bl	80006bc <GPIO_enuInit>
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40010c00 	.word	0x40010c00
 80008cc:	40010800 	.word	0x40010800

080008d0 <SPI1_Init>:
void SPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI1Config;
	SPI1Config.pSPIx=SPI1;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <SPI1_Init+0x38>)
 80008d8:	603b      	str	r3, [r7, #0]
	SPI1Config.SPIConfig.SPI_BusConfig=SPI_BUS_CONFIG_FD;
 80008da:	2301      	movs	r3, #1
 80008dc:	71bb      	strb	r3, [r7, #6]
	SPI1Config.SPIConfig.SPI_DeviceMode=SPI_DEVICE_MODE_MASTER;
 80008de:	2301      	movs	r3, #1
 80008e0:	713b      	strb	r3, [r7, #4]
	SPI1Config.SPIConfig.SPI_SclkSpeed=SPI_SCLK_SPEED_DIV2;
 80008e2:	2300      	movs	r3, #0
 80008e4:	717b      	strb	r3, [r7, #5]
	SPI1Config.SPIConfig.SPI_DFF = SPI_DFF_16BITS;
 80008e6:	2301      	movs	r3, #1
 80008e8:	71fb      	strb	r3, [r7, #7]
	SPI1Config.SPIConfig.SPI_CPHA = SPI_CPOL_LOW;
 80008ea:	2300      	movs	r3, #0
 80008ec:	727b      	strb	r3, [r7, #9]
	SPI1Config.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	723b      	strb	r3, [r7, #8]
	SPI1Config.SPIConfig.SPI_SSM = SPI_SSM_EN;
 80008f2:	2301      	movs	r3, #1
 80008f4:	72bb      	strb	r3, [r7, #10]
	SPI_Init(&SPI1Config);
 80008f6:	463b      	mov	r3, r7
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff fc73 	bl	80001e4 <SPI_Init>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40013000 	.word	0x40013000

0800090c <main>:
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
	char user_input[] = "Hello Maged";
 8000912:	4a0e      	ldr	r2, [pc, #56]	; (800094c <main+0x40>)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	ca07      	ldmia	r2, {r0, r1, r2}
 8000918:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	SPI_GPIOInit();
 800091c:	f7ff ffa2 	bl	8000864 <SPI_GPIOInit>
	SPI1_Init();
 8000920:	f7ff ffd6 	bl	80008d0 <SPI1_Init>
	SPI_SSIControl(SPI1, ENABLE);
 8000924:	2101      	movs	r1, #1
 8000926:	480a      	ldr	r0, [pc, #40]	; (8000950 <main+0x44>)
 8000928:	f7ff fd50 	bl	80003cc <SPI_SSIControl>
	SPI_PeripheralControl(SPI1, ENABLE);
 800092c:	2101      	movs	r1, #1
 800092e:	4808      	ldr	r0, [pc, #32]	; (8000950 <main+0x44>)
 8000930:	f7ff fd26 	bl	8000380 <SPI_PeripheralControl>
	SPI_SendData(SPI1 ,(uint8_t*)user_input, strlen(user_input));
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fc1a 	bl	8000170 <strlen>
 800093c:	4602      	mov	r2, r0
 800093e:	1d3b      	adds	r3, r7, #4
 8000940:	4619      	mov	r1, r3
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <main+0x44>)
 8000944:	f7ff fcd6 	bl	80002f4 <SPI_SendData>
	while(1)
 8000948:	e7fe      	b.n	8000948 <main+0x3c>
 800094a:	bf00      	nop
 800094c:	08000a08 	.word	0x08000a08
 8000950:	40013000 	.word	0x40013000

08000954 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000954:	480d      	ldr	r0, [pc, #52]	; (800098c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000956:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000958:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <LoopForever+0x6>)
  ldr r1, =_edata
 800095e:	490d      	ldr	r1, [pc, #52]	; (8000994 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <LoopForever+0xe>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000964:	e002      	b.n	800096c <LoopCopyDataInit>

08000966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096a:	3304      	adds	r3, #4

0800096c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800096c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000970:	d3f9      	bcc.n	8000966 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000972:	4a0a      	ldr	r2, [pc, #40]	; (800099c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000974:	4c0a      	ldr	r4, [pc, #40]	; (80009a0 <LoopForever+0x16>)
  movs r3, #0
 8000976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000978:	e001      	b.n	800097e <LoopFillZerobss>

0800097a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800097c:	3204      	adds	r2, #4

0800097e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000980:	d3fb      	bcc.n	800097a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000982:	f000 f811 	bl	80009a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000986:	f7ff ffc1 	bl	800090c <main>

0800098a <LoopForever>:

LoopForever:
    b LoopForever
 800098a:	e7fe      	b.n	800098a <LoopForever>
  ldr   r0, =_estack
 800098c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000990:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000994:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000998:	08000a1c 	.word	0x08000a1c
  ldr r2, =_sbss
 800099c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009a0:	2000003c 	.word	0x2000003c

080009a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009a4:	e7fe      	b.n	80009a4 <ADC1_2_IRQHandler>
	...

080009a8 <__libc_init_array>:
 80009a8:	b570      	push	{r4, r5, r6, lr}
 80009aa:	2500      	movs	r5, #0
 80009ac:	4e0c      	ldr	r6, [pc, #48]	; (80009e0 <__libc_init_array+0x38>)
 80009ae:	4c0d      	ldr	r4, [pc, #52]	; (80009e4 <__libc_init_array+0x3c>)
 80009b0:	1ba4      	subs	r4, r4, r6
 80009b2:	10a4      	asrs	r4, r4, #2
 80009b4:	42a5      	cmp	r5, r4
 80009b6:	d109      	bne.n	80009cc <__libc_init_array+0x24>
 80009b8:	f000 f81a 	bl	80009f0 <_init>
 80009bc:	2500      	movs	r5, #0
 80009be:	4e0a      	ldr	r6, [pc, #40]	; (80009e8 <__libc_init_array+0x40>)
 80009c0:	4c0a      	ldr	r4, [pc, #40]	; (80009ec <__libc_init_array+0x44>)
 80009c2:	1ba4      	subs	r4, r4, r6
 80009c4:	10a4      	asrs	r4, r4, #2
 80009c6:	42a5      	cmp	r5, r4
 80009c8:	d105      	bne.n	80009d6 <__libc_init_array+0x2e>
 80009ca:	bd70      	pop	{r4, r5, r6, pc}
 80009cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009d0:	4798      	blx	r3
 80009d2:	3501      	adds	r5, #1
 80009d4:	e7ee      	b.n	80009b4 <__libc_init_array+0xc>
 80009d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009da:	4798      	blx	r3
 80009dc:	3501      	adds	r5, #1
 80009de:	e7f2      	b.n	80009c6 <__libc_init_array+0x1e>
 80009e0:	08000a14 	.word	0x08000a14
 80009e4:	08000a14 	.word	0x08000a14
 80009e8:	08000a14 	.word	0x08000a14
 80009ec:	08000a18 	.word	0x08000a18

080009f0 <_init>:
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	bf00      	nop
 80009f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f6:	bc08      	pop	{r3}
 80009f8:	469e      	mov	lr, r3
 80009fa:	4770      	bx	lr

080009fc <_fini>:
 80009fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009fe:	bf00      	nop
 8000a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a02:	bc08      	pop	{r3}
 8000a04:	469e      	mov	lr, r3
 8000a06:	4770      	bx	lr
